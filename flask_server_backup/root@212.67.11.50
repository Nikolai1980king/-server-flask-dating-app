# –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å https://192.168.255.137

from flask import Flask, render_template_string, request, redirect, url_for, make_response, jsonify

import os
import uuid
import time
from datetime import datetime, timedelta
from collections import defaultdict
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import and_
from functools import wraps
import requests

app = Flask(__name__)
app.secret_key = 'super-secret-key'

UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///dating_app.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
# –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ 16MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1MB)
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024
db = SQLAlchemy(app)

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ –º–µ—Ç—Ä–∞—Ö) - –°–¢–†–û–ö–ê 29
MAX_REGISTRATION_DISTANCE = 1000  # 1000 –º–µ—Ç—Ä–æ–≤

# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∞–Ω–∫–µ—Ç—ã –≤ —á–∞—Å–∞—Ö - –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø
PROFILE_LIFETIME_HOURS = 24  # –ò–∑–º–µ–Ω–∏—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∞–Ω–∫–µ—Ç


def get_location_name(lat, lon):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/–ø–æ—Å–µ–ª–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞/–ø–æ—Å–µ–ª–∫–∞ –±–µ–∑ —Ä–∞–π–æ–Ω–æ–≤ –∏ –æ–±–ª–∞—Å—Ç–µ–π
    """
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        url = f"https://nominatim.openstreetmap.org/reverse?format=json&lat={lat}&lon={lon}&zoom=18&addressdetails=1"
        headers = {
            'User-Agent': 'DatingApp/1.0 (https://example.com; contact@example.com)'
        }

        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()

        data = response.json()

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        address = data.get('address', {})

        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞/–ø–æ—Å–µ–ª–∫–∞ (–∏—Å–∫–ª—é—á–∞–µ–º —Ä–∞–π–æ–Ω—ã –∏ –æ–±–ª–∞—Å—Ç–∏)
        location_name = (
                address.get('city') or
                address.get('town') or
                address.get('village') or
                address.get('hamlet') or
                address.get('suburb') or
                address.get('neighbourhood') or
                address.get('place')
        )

        if location_name:
            return location_name

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        display_name = data.get('display_name', '')
        if display_name:
            # –†–∞–∑–±–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∑–∞–ø—è—Ç—ã–º
            parts = display_name.split(',')

            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ —á–∞—Å—Ç—è—Ö –∞–¥—Ä–µ—Å–∞
            for part in parts:
                part = part.strip()
                # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                if any(keyword in part.lower() for keyword in
                       ['—Ä–∞–π–æ–Ω', '–æ–±–ª–∞—Å—Ç—å', '–∫—Ä–∞–π', '—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π', '—Å–µ–ª—å—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ',
                        '–≥–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ', '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π', '—Ä–æ—Å—Å–∏—è']):
                    continue
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤
                if any(keyword in part.lower() for keyword in
                       ['–ø–æ—Å–µ–ª–æ–∫', '–ø–æ—Å.', '—Å–µ–ª–æ', '–¥–µ—Ä–µ–≤–Ω—è', '–≥–æ—Ä–æ–¥', '—Å—Ç–∞–Ω–∏—Ü–∞', '—Ö—É—Ç–æ—Ä', '–∞—É–ª']):
                    return part
                # –ï—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, —Å—á–∏—Ç–∞–µ–º –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞
                if part and len(part) > 2 and not any(char.isdigit() for char in part):
                    return part

        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞: {e}")
        return None


def get_starry_night_css():
    return '''
        body { 
            font-family: Arial, sans-serif; 
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
            background-size: 400% 400%;
            animation: starryNight 15s ease infinite;
            position: relative;
            min-height: 100vh;
        }

        @keyframes starryNight {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: 
                radial-gradient(2px 2px at 20px 30px, #eee, transparent),
                radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
                radial-gradient(1px 1px at 90px 40px, #fff, transparent),
                radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent),
                radial-gradient(2px 2px at 160px 30px, #ddd, transparent);
            background-repeat: repeat;
            background-size: 200px 100px;
            animation: twinkle 4s ease-in-out infinite alternate;
            pointer-events: none;
            z-index: 1;
        }

        @keyframes twinkle {
            0% { opacity: 0.3; }
            100% { opacity: 1; }
        }
    '''


# --- –ú–æ–¥–µ–ª–∏ ---
class Profile(db.Model):
    id = db.Column(db.String, primary_key=True)
    name = db.Column(db.String, nullable=False)
    age = db.Column(db.Integer, nullable=False)
    gender = db.Column(db.String, nullable=False)
    hobbies = db.Column(db.String, nullable=False)
    goal = db.Column(db.String, nullable=False)
    city = db.Column(db.String, nullable=True)
    venue = db.Column(db.String, nullable=True)
    photo = db.Column(db.String, nullable=True)
    likes = db.Column(db.Integer, default=0)
    latitude = db.Column(db.Float, nullable=True)
    longitude = db.Column(db.Float, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)


class Message(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    chat_key = db.Column(db.String, nullable=False)
    sender = db.Column(db.String, nullable=False)
    text = db.Column(db.String, nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    read_by = db.Column(db.String, nullable=True)  # user_id, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ JSON


class Like(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.String, nullable=False)
    liked_id = db.Column(db.String, nullable=False)


# –£–¥–∞–ª—è—é in-memory —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–π:
# messages = defaultdict(list)
notifications = defaultdict(list)

read_likes = defaultdict(set)  # user_id -> set(profile_id)
new_matches = defaultdict(set)  # user_id -> set of new matched user_ids


def add_notification(user_id, message):
    notifications[user_id].append({
        'id': str(uuid.uuid4()),
        'message': message,
        'timestamp': datetime.now()
    })


def get_unread_messages_count(user_id):
    if not user_id:
        return 0
    # –ù–∞–π—Ç–∏ –≤—Å–µ —á–∞—Ç—ã, –≥–¥–µ —É—á–∞—Å—Ç–≤—É–µ—Ç user_id
    chat_keys = set()
    for msg in Message.query.all():
        ids = msg.chat_key.split('_')
        if user_id in ids:
            chat_keys.add(msg.chat_key)
    # –°—á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–∏—Ö —á–∞—Ç–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ user_id –∏ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ user_id
    count = 0
    for chat_key in chat_keys:
        count += Message.query.filter_by(chat_key=chat_key).filter(
            Message.sender != user_id,
            (Message.read_by.is_(None)) | (Message.read_by != user_id)
        ).count()
    return count


def get_unread_likes_count(user_id):
    if not user_id:
        return 0
    # –ü–æ–ª—É—á–∞–µ–º id –≤—Å–µ—Ö, –∫—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª
    all_likes = set(l.user_id for l in Like.query.filter_by(liked_id=user_id).all())
    # –ü–æ–ª—É—á–∞–µ–º id –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    viewed = read_likes.get(user_id, set())
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
    return len(all_likes - viewed)


def get_unread_matches_count(user_id):
    return len(new_matches[user_id])


def render_navbar(user_id, active=None, unread_messages=0, unread_likes=0, unread_matches=0):
    avatar_html = ''
    if user_id and Profile.query.get(user_id):
        photo_url = get_photo_url(Profile.query.get(user_id))
        avatar_html = f'<a href="/my_profile" style="display:inline-block;margin:0 18px 0 10px;vertical-align:middle;" title="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å">'
        avatar_html += f'<img src="{photo_url}" alt="–ê–≤–∞—Ç–∞—Ä" style="width:36px;height:36px;border-radius:50%;object-fit:cover;border:2px solid #6c757d;vertical-align:middle;">'
        avatar_html += '</a>'
    return render_template_string('''
    <nav id="navbar" style="position:fixed;top:0;left:0;width:100%;background:#080707;box-shadow:0 2px 8px rgba(0,0,0,0.07);z-index:100;display:flex;justify-content:center;align-items:center;padding:8px 0;">
        {{ avatar_html|safe }}
        <a href="/visitors" style="font-size:2em;margin:0 10px;{{'font-weight:bold;color:#ff6b6b;' if active=='visitors' else ''}}" title="–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏">üë•</a>
        <a href="/my_likes" style="font-size:2em;margin:0 10px;position:relative;{{'font-weight:bold;color:#ff6b6b;' if active=='likes' else ''}}" title="–ú–µ–Ω—è –ª–∞–π–∫–Ω—É–ª–∏">
            ‚ù§Ô∏è
            <span id="like-badge" style="display:{% if unread_likes > 0 %}inline{% else %}none{% endif %};position:absolute;top:-8px;right:-8px;background:#ff6b6b;color:#fff;border-radius:50%;padding:2px 7px;font-size:0.8em;">{{ unread_likes if unread_likes > 0 else '' }}</span>
        </a>
        <a href="/my_matches" style="font-size:2em;margin:0 10px;position:relative;{{'font-weight:bold;color:#ff6b6b;' if active=='matches' else ''}}" title="–ú–æ–∏ –º—ç—Ç—á–∏">ü§ù
            <span id="match-badge" style="display:{% if unread_matches > 0 %}inline{% else %}none{% endif %};position:absolute;top:-8px;right:-8px;background:#4CAF50;color:#fff;border-radius:50%;padding:2px 7px;font-size:0.8em;">{{ unread_matches if unread_matches > 0 else '' }}</span>
        </a>
        <a href="/my_messages" style="font-size:2em;margin:0 10px;position:relative;{{'font-weight:bold;color:#ff6b6b;' if active=='messages' else ''}}" title="–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è">
            ‚úâÔ∏è
            <span id="msg-badge" style="display:{% if unread_messages > 0 %}inline{% else %}none{% endif %};position:absolute;top:-8px;right:-8px;background:#ff6b6b;color:#fff;border-radius:50%;padding:2px 7px;font-size:0.8em;">{{ unread_messages if unread_messages > 0 else '' }}</span>
        </a>
    </nav>
    <div style="height:48px"></div>
    <script>
    setInterval(function() {
        fetch('/api/unread')
            .then(r => r.json())
            .then(data => {
                let msgBadge = document.getElementById('msg-badge');
                if (msgBadge) {
                    if (data.unread_messages > 0) {
                        msgBadge.innerText = data.unread_messages;
                        msgBadge.style.display = '';
                    } else {
                        msgBadge.style.display = 'none';
                    }
                }
                let likeBadge = document.getElementById('like-badge');
                if (likeBadge) {
                    if (data.unread_likes > 0) {
                        likeBadge.innerText = data.unread_likes;
                        likeBadge.style.display = '';
                    } else {
                        likeBadge.style.display = 'none';
                    }
                }
                let matchBadge = document.getElementById('match-badge');
                if (matchBadge) {
                    if (data.unread_matches > 0) {
                        matchBadge.innerText = data.unread_matches;
                        matchBadge.style.display = '';
                    } else {
                        matchBadge.style.display = 'none';
                    }
                }
            });
    }, 5000);
    </script>
    ''', active=active, unread_messages=unread_messages, unread_likes=unread_likes, unread_matches=unread_matches,
                                  avatar_html=avatar_html)


@app.route('/api/unread')
def api_unread():
    user_id = request.cookies.get('user_id')
    return jsonify({
        "unread_messages": get_unread_messages_count(user_id) if user_id else 0,
        "unread_likes": get_unread_likes_count(user_id) if user_id else 0,
        "unread_matches": get_unread_matches_count(user_id) if user_id else 0
    })


@app.route('/api/mark_likes_read', methods=['POST'])
def api_mark_likes_read():
    """API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}), 401

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        liked_me_ids = set(l.user_id for l in Like.query.filter_by(liked_id=user_id).all())
        # –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        read_likes[user_id] = liked_me_ids

        return jsonify({"success": True, "marked_count": len(liked_me_ids)})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


@app.route('/api/mark_messages_read/<string:other_user_id>', methods=['POST'])
def api_mark_messages_read(other_user_id):
    """API –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ"""
    user_id = request.cookies.get('user_id')
    if not user_id:
        return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}), 401

    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç other_user_id –∫ user_id, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
        chat_key = '_'.join(sorted([user_id, other_user_id]))
        unread_messages = Message.query.filter_by(chat_key=chat_key).filter(
            Message.sender == other_user_id,
            (Message.read_by.is_(None)) | (Message.read_by != user_id)
        ).all()

        # –û—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        for msg in unread_messages:
            msg.read_by = user_id

        db.session.commit()

        return jsonify({
            "success": True,
            "marked_read": len(unread_messages),
            "unread_messages": get_unread_messages_count(user_id)
        })

    except Exception as e:
        db.session.rollback()
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"}), 500


@app.route('/api/geolocation')
def api_geolocation():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return jsonify({
        "success": True,
        "message": "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞"
    })


@app.route('/api/get-location-name', methods=['POST'])
def api_get_location_name():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    data = request.get_json()
    lat = data.get('latitude')
    lon = data.get('longitude')

    if not lat or not lon:
        return jsonify({'error': '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400

    try:
        lat = float(lat)
        lon = float(lon)
        location_name = get_location_name(lat, lon)

        if location_name:
            return jsonify({
                'success': True,
                'location_name': location_name
            })
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç'
            }), 404

    except ValueError:
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}), 400
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}), 500


@app.route('/api/calculate-distance', methods=['POST'])
def api_calculate_distance():
    """API –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    data = request.get_json()

    visitor_lat = data.get('visitor_lat')
    visitor_lng = data.get('visitor_lng')
    venue_lat = data.get('venue_lat')
    venue_lng = data.get('venue_lng')

    if not all([visitor_lat, visitor_lng, venue_lat, venue_lng]):
        return jsonify({'error': '–ù–µ –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'}), 400

    try:
        visitor_lat = float(visitor_lat)
        visitor_lng = float(visitor_lng)
        venue_lat = float(venue_lat)
        venue_lng = float(venue_lng)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º geopy.distance.geodesic –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        from geopy.distance import geodesic

        visitor_point = (visitor_lat, visitor_lng)
        venue_point = (venue_lat, venue_lng)

        distance = geodesic(visitor_point, venue_point).meters

        return jsonify({
            'success': True,
            'distance': distance,
            'visitor_coords': f"{visitor_lat}, {visitor_lng}",
            'venue_coords': f"{venue_lat}, {venue_lng}"
        })

    except ValueError:
        return jsonify({'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}), 400
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {str(e)}'}), 500


@app.route('/test-balloon-integration')
def test_balloon_integration():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–ª—É–Ω–æ–≤"""
    return render_template_string(open('test_balloon_integration.html').read())


@app.route('/debug-geolocation')
def debug_geolocation():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"""
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <title>–¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</title>
            <meta charset="utf-8">
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ccc; border-radius: 5px; }
                .success { background-color: #d4edda; border-color: #c3e6cb; }
                .error { background-color: #f8d7da; border-color: #f5c6cb; }
                .info { background-color: #d1ecf1; border-color: #bee5eb; }
                button { padding: 10px 20px; margin: 5px; cursor: pointer; }
                #results { margin-top: 20px; }
            </style>
        </head>
        <body>
            <h1>üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</h1>

            <div class="test-section info">
                <h3>üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</h3>
                <button onclick="checkGeolocationSupport()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É</button>
                <div id="support-result"></div>
            </div>

            <div class="test-section info">
                <h3>üìç –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</h3>
                <button onclick="getCurrentLocation()">–ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
                <div id="location-result"></div>
            </div>

            <div class="test-section info">
                <h3>üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS</h3>
                <button onclick="checkHTTPS()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</button>
                <div id="https-result"></div>
            </div>

            <div class="test-section info">
                <h3>üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞</h3>
                <div id="browser-settings">
                    <p><strong>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</strong></p>
                    <ul>
                        <li>–†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–∞–π—Ç–∞</li>
                        <li>–ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞</li>
                        <li>–ù–µ—Ç –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π, –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é</li>
                    </ul>
                </div>
            </div>

            <div id="results"></div>

            <script>
                function log(message, type = 'info') {
                    const results = document.getElementById('results');
                    const div = document.createElement('div');
                    div.className = `test-section ${type}`;
                    div.innerHTML = `<strong>${new Date().toLocaleTimeString()}:</strong> ${message}`;
                    results.appendChild(div);
                }

                function checkGeolocationSupport() {
                    const resultDiv = document.getElementById('support-result');

                    if (navigator.geolocation) {
                        resultDiv.innerHTML = '<div class="success">‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º</div>';
                        log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º', 'success');
                    } else {
                        resultDiv.innerHTML = '<div class="error">‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º</div>';
                        log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
                    }
                }

                function getCurrentLocation() {
                    const resultDiv = document.getElementById('location-result');
                    resultDiv.innerHTML = '<div class="info">‚è≥ –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ...</div>';

                    if (!navigator.geolocation) {
                        resultDiv.innerHTML = '<div class="error">‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</div>';
                        return;
                    }

                    navigator.geolocation.getCurrentPosition(
                        function(position) {
                            const coords = position.coords;
                            const accuracy = coords.accuracy;
                            const timestamp = new Date(position.timestamp);

                            resultDiv.innerHTML = `
                                <div class="success">
                                    ‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!<br>
                                    <strong>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</strong> ${coords.latitude}, ${coords.longitude}<br>
                                    <strong>–¢–æ—á–Ω–æ—Å—Ç—å:</strong> ¬±${accuracy} –º–µ—Ç—Ä–æ–≤<br>
                                    <strong>–í—Ä–µ–º—è:</strong> ${timestamp.toLocaleString()}
                                </div>
                            `;

                            log(`–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: ${coords.latitude}, ${coords.longitude}`, 'success');
                        },
                        function(error) {
                            let errorMessage = '';
                            switch(error.code) {
                                case error.PERMISSION_DENIED:
                                    errorMessage = '‚ùå –î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
                                    break;
                                case error.POSITION_UNAVAILABLE:
                                    errorMessage = '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                                    break;
                                case error.TIMEOUT:
                                    errorMessage = '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è';
                                    break;
                                case error.UNKNOWN_ERROR:
                                    errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                                    break;
                            }

                            resultDiv.innerHTML = `<div class="error">${errorMessage}</div>`;
                            log(`–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${errorMessage}`, 'error');
                        },
                        {
                            enableHighAccuracy: true,
                            timeout: 10000,
                            maximumAge: 60000
                        }
                    );
                }

                function checkHTTPS() {
                    const resultDiv = document.getElementById('https-result');
                    const isHTTPS = window.location.protocol === 'https:';
                    const isLocalhost = window.location.hostname === 'localhost' || 
                                       window.location.hostname === '127.0.0.1';

                    if (isHTTPS || isLocalhost) {
                        resultDiv.innerHTML = '<div class="success">‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</div>';
                        log('–ü—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', 'success');
                    } else {
                        resultDiv.innerHTML = '<div class="error">‚ùå –î–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS</div>';
                        log('–î–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS', 'error');
                    }
                }

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                window.onload = function() {
                    log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...', 'info');
                    checkGeolocationSupport();
                    checkHTTPS();
                };
            </script>
        </body>
        </html>
    ''')


@app.route('/')
def home():
    user_id = request.cookies.get('user_id')
    user_notifications = notifications.get(user_id, [])
    unread_notifications = [
        n for n in user_notifications
        if datetime.now() - n['timestamp'] < timedelta(minutes=5)
    ]
    has_profile = Profile.query.get(user_id)
    navbar = render_navbar(
        user_id,
        active=None,
        unread_messages=get_unread_messages_count(user_id),
        unread_likes=get_unread_likes_count(user_id)
    )
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –≤ –∫–∞—Ñ–µ</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { text-align: center; padding: 20px; }
                /* –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö */
                html, body {
                    touch-action: manipulation;
                    -webkit-touch-callout: none;
                    -webkit-user-select: none;
                    -khtml-user-select: none;
                    -moz-user-select: none;
                    -ms-user-select: none;
                    user-select: none;
                }
                h1 { color: #ff6b6b; margin-top: 20px; }
                .welcome-message {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 20px;
                    margin: 20px auto;
                    max-width: 600px;
                    box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
                    text-align: center;
                }
                .welcome-text {
                    font-size: 1.4em;
                    font-weight: bold;
                    margin: 0 0 15px 0;
                    color: #fff;
                    text-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .welcome-description {
                    font-size: 1.1em;
                    line-height: 1.6;
                    margin: 0 0 20px 0;
                    color: #f8f9fa;
                    opacity: 0.95;
                }
                .welcome-price {
                    font-size: 1.2em;
                    font-weight: bold;
                    margin: 0;
                    color: #ffd700;
                    text-shadow: 0 2px 4px rgba(0,0,0,0.2);
                    background: rgba(255,255,255,0.1);
                    padding: 10px 20px;
                    border-radius: 25px;
                    display: inline-block;
                }
                .notification { position: fixed; top: 60px; left: 50%; transform: translateX(-50%); background: #4CAF50; color: white; padding: 15px 25px; border-radius: 30px; animation: fadeInOut 4s forwards; }
                @keyframes fadeInOut {
                    0% { opacity: 0; top: 0; }
                    10% { opacity: 1; top: 60px; }
                    90% { opacity: 1; top: 60px; }
                    100% { opacity: 0; top: 0; }
                }
                .big-create-btn {
                    display: inline-flex;
                    align-items: center;
                    justify-content: center;
                    margin: 20px auto 0 auto;
                    padding: 22px 40px;
                    font-size: 1.3em;
                    font-weight: bold;
                    background: linear-gradient(90deg, #ff6b6b 0%, #ffb86b 100%);
                    color: #fff;
                    border: none;
                    border-radius: 40px;
                    box-shadow: 0 6px 24px rgba(255,107,107,0.15);
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    gap: 12px;
                }
                .big-create-btn:hover {
                    box-shadow: 0 12px 32px rgba(255,107,107,0.25);
                    transform: translateY(-2px) scale(1.04);
                }
                .big-create-btn .icon {
                    font-size: 1.5em;
                    margin-right: 10px;
                }
            </style>
        </head>
        <body>
            {{ navbar|safe }}
            {% for notification in unread_notifications %}
                <div class="notification">{{ notification.message }}</div>
            {% endfor %}
            <div class="welcome-message">
                <p class="welcome-text">–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—Ä–∏—è—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –∑–∞ —á–∞—à–µ—á–∫–æ–π –∫–æ—Ñ–µ? ‚òï</p>
                <p class="welcome-description">–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ª—é–¥—å–º–∏ –≤ –∫–∞—Ñ–µ ‚Äî –¥–ª—è –¥—É—à–µ–≤–Ω—ã—Ö –±–µ—Å–µ–¥, –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.</p>
                <p class="welcome-price">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî –≤—Å–µ–≥–æ 50 —Ä—É–±–ª–µ–π, –∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –±–µ—Å—Ü–µ–Ω–Ω—ã! üòä</p>
            </div>
            <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ –∫–∞—Ñ–µ! üéâ</h1>
            <p style="color: white;">–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è.</p>
            {% if not has_profile %}
                <a href="/create" class="big-create-btn">
                    <span class="icon">üìù</span> –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É
                </a>
            {% endif %}
        </body>
        </html>
    ''', unread_notifications=unread_notifications, navbar=navbar, has_profile=has_profile,
                                  get_starry_night_css=get_starry_night_css)


@app.route('/create', methods=['GET', 'POST'])
def create_profile():
    # –í—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–π –∞–Ω–∫–µ—Ç—ã
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–∫–µ—Ç
    user_id = str(uuid.uuid4())
    if request.method == 'POST':
        photo = request.files['photo']
        venue = request.form.get('venue')
        latitude = request.form.get('latitude')
        longitude = request.form.get('longitude')
        venue_lat = request.form.get('venue_lat')
        venue_lng = request.form.get('venue_lng')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º
        if latitude and longitude and venue_lat and venue_lng:
            try:
                from geopy.distance import geodesic

                user_point = (float(latitude), float(longitude))
                venue_point = (float(venue_lat), float(venue_lng))

                distance = geodesic(user_point, venue_point).meters

                if distance > MAX_REGISTRATION_DISTANCE:
                    return jsonify({
                        'success': False,
                        'error': f'–£–≤–∞–∂–∞–µ–º—ã–π, –í—ã –¥–∞–ª–µ–∫–æ –æ—Ç –∫–∞—Ñ–µ, –ø–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance / 1000:.1f} –∫–º, –º–∞–∫—Å–∏–º—É–º: {MAX_REGISTRATION_DISTANCE / 1000:.1f} –∫–º'
                    }), 400

            except (ValueError, TypeError) as e:
                return jsonify({
                    'success': False,
                    'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è'
                }), 400

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥/–ø–æ—Å–µ–ª–æ–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        location_name = None
        if latitude and longitude:
            try:
                lat = float(latitude)
                lon = float(longitude)
                location_name = get_location_name(lat, lon)
            except (ValueError, TypeError):
                pass

        try:
            if photo and photo.filename:
                filename = f"{user_id}_{photo.filename}"
                photo_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
                photo.save(photo_path)
                profile = Profile(
                    id=user_id,
                    name=request.form['name'],
                    age=int(request.form['age']),
                    gender=request.form['gender'],
                    hobbies=request.form['hobbies'],
                    goal=request.form['goal'],
                    city=location_name,
                    venue=venue,
                    photo=filename,
                    likes=0,
                    latitude=float(latitude) if latitude else None,
                    longitude=float(longitude) if longitude else None
                )
                db.session.add(profile)
                db.session.commit()

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–∞
                resp = jsonify({
                    'success': True,
                    'user_id': user_id,
                    'redirect': url_for('view_profile', id=user_id)
                })
                resp.set_cookie('user_id', user_id)
                return resp
            else:
                return jsonify({
                    'success': False,
                    'error': '–§–æ—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã'
                }), 400
        except Exception as e:
            db.session.rollback()
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: {str(e)}'
            }), 500
    navbar = render_navbar(user_id, active=None, unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É</title>
            <script src="https://api-maps.yandex.ru/2.1/?apikey=9a3beffb-a8a0-4d55-850f-d258dd28c104&lang=ru_RU" type="text/javascript"></script>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    max-width: 600px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
                    background-size: 400% 400%;
                    animation: starryNight 15s ease infinite;
                    position: relative;
                    min-height: 100vh;
                }

                @keyframes starryNight {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }

                body::before {
                    content: '';
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-image: 
                        radial-gradient(2px 2px at 20px 30px, #eee, transparent),
                        radial-gradient(2px 2px at 40px 70px, rgba(255,255,255,0.8), transparent),
                        radial-gradient(1px 1px at 90px 40px, #fff, transparent),
                        radial-gradient(1px 1px at 130px 80px, rgba(255,255,255,0.6), transparent),
                        radial-gradient(2px 2px at 160px 30px, #ddd, transparent);
                    background-repeat: repeat;
                    background-size: 200px 100px;
                    animation: twinkle 4s ease-in-out infinite alternate;
                    pointer-events: none;
                    z-index: 1;
                }

                @keyframes twinkle {
                    0% { opacity: 0.3; }
                    100% { opacity: 1; }
                }

                .form-container {
                    position: relative;
                    z-index: 2;
                    background: rgba(255, 255, 255, 0.1);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 30px;
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                }

                h2 {
                    color: #fff;
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }

                input, textarea, select { 
                    width: calc(100% - 24px); 
                    padding: 12px; 
                    margin: 10px 12px; 
                    background: rgba(76, 175, 80, 0.1);
                    border: 1px solid rgba(76, 175, 80, 0.3);
                    border-radius: 10px;
                    color: #fff;
                    font-size: 1em;
                    text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
                    box-sizing: border-box;
                }

                input::placeholder, textarea::placeholder, select::placeholder {
                    color: rgba(255, 255, 255, 0.7);
                    text-shadow: 0 0 3px rgba(255, 255, 255, 0.2);
                }

                input:focus, textarea:focus, select:focus {
                    outline: none;
                    border-color: #4CAF50;
                    box-shadow: 0 0 15px rgba(76, 175, 80, 0.3);
                    background: rgba(76, 175, 80, 0.15);
                }

                select option {
                    background: rgba(76, 175, 80, 0.9);
                    color: #fff;
                    border: none;
                }

                select option:hover {
                    background: rgba(76, 175, 80, 1);
                }

                input[type="file"] {
                    background: rgba(76, 175, 80, 0.1);
                    border: 1px solid rgba(76, 175, 80, 0.3);
                    color: #fff;
                    padding: 12px;
                    border-radius: 10px;
                    cursor: pointer;
                    width: calc(100% - 24px);
                    margin: 10px 12px;
                    box-sizing: border-box;
                }

                input[type="file"]:focus {
                    outline: none;
                    border-color: #4CAF50;
                    box-shadow: 0 0 15px rgba(76, 175, 80, 0.3);
                    background: rgba(76, 175, 80, 0.15);
                }

                input[type="file"]::-webkit-file-upload-button {
                    background: rgba(76, 175, 80, 0.3);
                    color: #fff;
                    border: 1px solid rgba(76, 175, 80, 0.5);
                    border-radius: 5px;
                    padding: 8px 12px;
                    cursor: pointer;
                    margin-right: 10px;
                }

                input[type="file"]::-webkit-file-upload-button:hover {
                    background: rgba(76, 175, 80, 0.5);
                }

                label {
                    color: #fff;
                    font-weight: bold;
                    text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
                }

                .modern-btn {
                    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 25px;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    font-weight: bold;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
                    transform: translateY(-3px) scale(1.05);
                }
                .back-btn {
                    background: linear-gradient(90deg, #6c757d 0%, #495057 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(108,117,125,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 20px;
                }
                .back-btn:hover {
                    box-shadow: 0 8px 24px rgba(108,117,125,0.3);
                    transform: translateY(-2px) scale(1.03);
                }

                .map-container {
                    margin: 20px 0;
                    border-radius: 15px;
                    overflow: hidden;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
                }

                #map {
                    width: 100%;
                    height: 300px;
                    border-radius: 15px;
                }

                .location-info {
                    background: rgba(76, 175, 80, 0.1);
                    border: 1px solid rgba(76, 175, 80, 0.3);
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    color: #fff;
                    text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
                }

                .location-btn {
                    background: linear-gradient(90deg, #4CAF50 0%, #81c784 100%);
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 20px;
                    font-size: 1em;
                    cursor: pointer;
                    margin: 5px;
                    transition: all 0.3s ease;
                }
                .location-btn:hover {
                    box-shadow: 0 4px 16px rgba(76,175,80,0.3);
                    transform: translateY(-2px);
                }

                .location-return-btn {
                    position: absolute;
                    top: 10px;
                    right: 10px;
                    background: linear-gradient(90deg, #2196F3 0%, #64B5F6 100%);
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 20px;
                    font-size: 0.9em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    box-shadow: 0 2px 10px rgba(33, 150, 243, 0.3);
                    z-index: 1000;
                    font-weight: bold;
                }

                .location-return-btn:hover {
                    box-shadow: 0 4px 16px rgba(33, 150, 243, 0.5);
                    transform: translateY(-2px) scale(1.05);
                    background: linear-gradient(90deg, #1976D2 0%, #42A5F5 100%);
                }

                .map-container {
                    position: relative;
                }
            </style>
        </head>
        <body>
            {{ navbar|safe }}
            <div class="form-container">
                <h2 style="text-align: center; margin-top: 5px;">–°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É</h2>
                <p style="color: #fff; opacity: 0.8; margin-bottom: 20px; text-align: center;">
                    üìç –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                </p>
                <form method="post" enctype="multipart/form-data">
                <input type="text" name="name" placeholder="–í–∞—à–µ –∏–º—è" maxlength="15" required>
                <input type="number" name="age" placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" min="1" max="999" required>
                <select name="gender" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                    <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                    <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                    <option value="other">–î—Ä—É–≥–æ–µ</option>
                </select>
                <textarea name="hobbies" placeholder="–í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è" maxlength="100" required></textarea>
                <textarea name="goal" placeholder="–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞" maxlength="100" required></textarea>

                    <div class="map-container">
                        <div id="map"></div>
                        <button type="button" id="return-to-location-btn" class="location-return-btn" onclick="returnToMyLocation()" style="display: none;">
                            üìç –Ø —Ç—É—Ç
                        </button>
                    </div>

                <!-- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è -->
                <div style="margin: 15px 0; padding: 12px; background: linear-gradient(135deg, #ff6b6b, #ff8e8e); border-radius: 8px; border: 2px solid #ff4757; box-shadow: 0 4px 15px rgba(255, 71, 87, 0.3);">
                    <div style="display: flex; align-items: center; gap: 10px; color: white; font-weight: 600; font-size: 14px;">
                        <span style="font-size: 18px;">‚ö†Ô∏è</span>
                        <span>–ö–ª–∏–∫–Ω–∏—Ç–µ –≤ –∫–∞—Ä—Ç–µ –Ω–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–µ –Ω–∏–∂–µ</span>
                    </div>
                </div>

                <input type="text" name="venue" id="venue-input" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏ —Ç.–¥.)" required onchange="updateVenueCoordinates()">
                <input type="hidden" name="latitude" id="latitude-input">
                <input type="hidden" name="longitude" id="longitude-input">
                <input type="hidden" name="venue_lat" id="venue-lat-input">
                <input type="hidden" name="venue_lng" id="venue-lng-input">

                <!-- –°–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤) -->
                <input type="hidden" id="visitor-coordinates-display">
                <input type="hidden" id="venue-coordinates-display">
                <input type="hidden" id="distance-display">

                <input type="file" name="photo" accept="image/*" required>

                <div class="terms-checkbox-container" style="margin: 20px 0; padding: 15px; background: rgba(76, 175, 80, 0.1); border-radius: 10px; border: 1px solid rgba(76, 175, 80, 0.3);">
                    <label style="display: flex; align-items: center; gap: 10px; cursor: pointer; color: #fff; font-size: 1em;">
                        <input type="checkbox" id="terms-checkbox" name="terms_accepted" required style="width: 18px; height: 18px; accent-color: #4CAF50;">
                        <span>–Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å <a href="/terms" target="_blank" style="color: #4CAF50; text-decoration: underline;">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a></span>
                    </label>
                </div>

                <div style="text-align: center; margin-top: 20px;">
                    <button type="submit" class="modern-btn" id="create-btn" disabled>–°–æ–∑–¥–∞—Ç—å</button>
                </div>
            </form>
            <div style="text-align: center; margin-top: 15px;">
                <a href="/" class="back-btn">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
            </div>

            <script>
                // –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –∫–∞—Ä—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                // –∏ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è.
                let myMap, myPlacemark;
                let currentLocation = null;



                function initMap() {
                    ymaps.ready(function () {
                        myMap = new ymaps.Map('map', {
                            center: [55.76, 37.64], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            zoom: 10,
                            controls: ['zoomControl', 'fullscreenControl']
                        });

                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        getCurrentLocation();

                        // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                        // myMap.events.add('click', function (e) {
                        //     var coords = e.get('coords');
                        //     setLocation(coords[0], coords[1]);
                        // });

                        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –±–∞–ª—É–Ω–æ–≤
                        myMap.events.add('balloonopen', function (e) {
                            console.log('üéà –ë–∞–ª—É–Ω –æ—Ç–∫—Ä—ã—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...');
                            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª—É–Ω–∞
                            setTimeout(function() {
                                parseBalloonAndFillVenue();
                            }, 500);
                        });
                    });
                }

                function setLocation(lat, lng) {
                    currentLocation = {lat: lat, lng: lng};

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                    document.getElementById('latitude-input').value = lat;
                    document.getElementById('longitude-input').value = lng;

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
                    const visitorCoordsDisplay = document.getElementById('visitor-coordinates-display');
                    if (visitorCoordsDisplay) {
                        visitorCoordsDisplay.value = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                    }

                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ—Ç–∫—É
                    if (myPlacemark) {
                        myMap.geoObjects.remove(myPlacemark);
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
                    myPlacemark = new ymaps.Placemark([lat, lng], {
                        balloonContent: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è'
                    }, {
                        preset: 'islands#redDotIcon'
                    });

                    myMap.geoObjects.add(myPlacemark);
                    myMap.setCenter([lat, lng], 15);

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–Ø —Ç—É—Ç" –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                    const returnBtn = document.getElementById('return-to-location-btn');
                    if (returnBtn) {
                        returnBtn.style.display = 'block';
                    }

                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥/–ø–æ—Å–µ–ª–æ–∫ (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
                    getLocationName(lat, lng);

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    const venueInput = document.getElementById('venue-input');
                    if (venueInput && venueInput.value.trim()) {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è (–±–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
                        const venueValue = venueInput.value.trim();
                        const venueName = venueValue.replace(/\s*\(\d+\.?\d*\s*(–º|–∫–º)\)$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö
                        calculateDistanceAndUpdateVenueField(venueName);
                    } else {
                        // –ï—Å–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        calculateDistance();
                    }

                    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', lat, lng);
                }

                function getCurrentLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                            function(position) {
                                var lat = position.coords.latitude;
                                var lng = position.coords.longitude;
                                setLocation(lat, lng);
                            },
                            function(error) {
                                console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                            },
                            {
                                enableHighAccuracy: false,
                                timeout: 10000,
                                maximumAge: 300000
                            }
                        );
                    } else {
                        console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–≤–æ–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
                function returnToMyLocation() {
                    if (currentLocation) {
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        myMap.setCenter([currentLocation.lat, currentLocation.lng], 15);
                        console.log('üìç –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–∞—à–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é:', currentLocation.lat, currentLocation.lng);
                    } else {
                        // –ï—Å–ª–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
                        console.log('üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–Ω–æ–≤–æ...');
                        getCurrentLocation();
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è clearLocation —É–¥–∞–ª–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ
                // function clearLocation() {
                //     // –ö–æ–¥ —É–¥–∞–ª–µ–Ω
                // }

                // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function clearVenueCoordinates() {
                    const venueCoordsDisplay = document.getElementById('venue-coordinates-display');
                    if (venueCoordsDisplay) {
                        venueCoordsDisplay.value = '';
                    }

                    // –û—á–∏—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ø–æ–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                    const venueInput = document.getElementById('venue-input');
                    if (venueInput && venueInput.value.trim()) {
                        const venueValue = venueInput.value.trim();
                        const venueName = venueValue.replace(/\s*\(\d+\.?\d*\s*(–º|–∫–º)\)$/, ''); // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö
                        venueInput.value = venueName;
                    }

                    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');

                    // –û—á–∏—â–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    clearDistance();
                }

                // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–º –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ–º
                function calculateDistance() {
                    const visitorCoordsDisplay = document.getElementById('visitor-coordinates-display');
                    const venueCoordsDisplay = document.getElementById('venue-coordinates-display');
                    const distanceDisplay = document.getElementById('distance-display');

                    if (!visitorCoordsDisplay || !venueCoordsDisplay || !distanceDisplay) {
                        return;
                    }

                    const visitorCoords = visitorCoordsDisplay.value.trim();
                    const venueCoords = venueCoordsDisplay.value.trim();

                    if (!visitorCoords || !venueCoords) {
                        distanceDisplay.value = '';
                        return;
                    }

                    try {
                        // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        const [visitorLat, visitorLng] = visitorCoords.split(',').map(coord => parseFloat(coord.trim()));
                        const [venueLat, venueLng] = venueCoords.split(',').map(coord => parseFloat(coord.trim()));

                        if (isNaN(visitorLat) || isNaN(visitorLng) || isNaN(venueLat) || isNaN(venueLng)) {
                            distanceDisplay.value = '–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö';
                            return;
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                        fetch('/api/calculate-distance', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                visitor_lat: visitorLat,
                                visitor_lng: visitorLng,
                                venue_lat: venueLat,
                                venue_lng: venueLng
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const distance = data.distance;
                                if (distance < 1000) {
                                    distanceDisplay.value = `${Math.round(distance)} –º–µ—Ç—Ä–æ–≤`;
                                } else {
                                    distanceDisplay.value = `${(distance / 1000).toFixed(2)} –∫–º`;
                                }
                                console.log('‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ:', distance, '–º–µ—Ç—Ä–æ–≤');
                            } else {
                                distanceDisplay.value = '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞';
                                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:', data.error);
                            }
                        })
                        .catch(error => {
                            distanceDisplay.value = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:', error);
                        });

                    } catch (error) {
                        distanceDisplay.value = '–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö';
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function calculateDistanceAndUpdateVenueField(venueName) {
                    const visitorCoordsDisplay = document.getElementById('visitor-coordinates-display');
                    const venueCoordsDisplay = document.getElementById('venue-coordinates-display');
                    const venueInput = document.getElementById('venue-input');
                    const distanceDisplay = document.getElementById('distance-display');

                    if (!visitorCoordsDisplay || !venueCoordsDisplay || !venueInput) {
                        return;
                    }

                    const visitorCoords = visitorCoordsDisplay.value.trim();
                    const venueCoords = venueCoordsDisplay.value.trim();

                    if (!visitorCoords || !venueCoords) {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –±–µ–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                        venueInput.value = venueName;
                        if (distanceDisplay) {
                            distanceDisplay.value = '';
                        }
                        return;
                    }

                    try {
                        // –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                        const [visitorLat, visitorLng] = visitorCoords.split(',').map(coord => parseFloat(coord.trim()));
                        const [venueLat, venueLng] = venueCoords.split(',').map(coord => parseFloat(coord.trim()));

                        if (isNaN(visitorLat) || isNaN(visitorLng) || isNaN(venueLat) || isNaN(venueLng)) {
                            venueInput.value = venueName;
                            if (distanceDisplay) {
                                distanceDisplay.value = '–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö';
                            }
                            return;
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                        fetch('/api/calculate-distance', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                visitor_lat: visitorLat,
                                visitor_lng: visitorLng,
                                venue_lat: venueLat,
                                venue_lng: venueLng
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                const distance = data.distance;
                                let distanceText;

                                if (distance < 1000) {
                                    distanceText = `${Math.round(distance)} –º`;
                                } else {
                                    distanceText = `${(distance / 1000).toFixed(1)} –∫–º`;
                                }

                                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –≤ —Å–∫–æ–±–∫–∞—Ö
                                venueInput.value = `${venueName} (${distanceText})`;

                                // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                                if (distanceDisplay) {
                                    if (distance < 1000) {
                                        distanceDisplay.value = `${Math.round(distance)} –º–µ—Ç—Ä–æ–≤`;
                                    } else {
                                        distanceDisplay.value = `${(distance / 1000).toFixed(2)} –∫–º`;
                                    }
                                }

                                console.log('‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –Ω–∞–∑–≤–∞–Ω–∏—é –∑–∞–≤–µ–¥–µ–Ω–∏—è:', distance, '–º–µ—Ç—Ä–æ–≤');
                            } else {
                                venueInput.value = venueName;
                                if (distanceDisplay) {
                                    distanceDisplay.value = '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞';
                                }
                                console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:', data.error);
                            }
                        })
                        .catch(error => {
                            venueInput.value = venueName;
                            if (distanceDisplay) {
                                distanceDisplay.value = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
                            }
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è:', error);
                        });

                    } catch (error) {
                        venueInput.value = venueName;
                        if (distanceDisplay) {
                            distanceDisplay.value = '–û—à–∏–±–∫–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö';
                        }
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:', error);
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                function clearDistance() {
                    const distanceDisplay = document.getElementById('distance-display');
                    if (distanceDisplay) {
                        distanceDisplay.value = '';
                    }
                }

                function getLocationName(lat, lng) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞/–ø–æ—Å–µ–ª–∫–∞ (–±–µ–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ)
                    fetch('/api/get-location-name', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            latitude: lat,
                            longitude: lng
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('üìç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥/–ø–æ—Å–µ–ª–æ–∫:', data.location_name);
                        } else {
                            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥/–ø–æ—Å–µ–ª–æ–∫');
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞/–ø–æ—Å–µ–ª–∫–∞:', error);
                    });
                }

                // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–ª—É–Ω–∞
                function extractNameFromBalloon() {
                    try {
                        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –±–∞–ª—É–Ω–∞...');

                        // –ò—â–µ–º –±–∞–ª—É–Ω –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                        let balloonContent = document.querySelector('.ymaps-2-1-79-balloon');
                        if (!balloonContent) {
                            balloonContent = document.querySelector('.ymaps-balloon');
                        }
                        if (!balloonContent) {
                            balloonContent = document.querySelector('.balloon');
                        }
                        if (!balloonContent) {
                            balloonContent = document.querySelector('[class*="balloon"]');
                        }
                        if (!balloonContent) {
                            balloonContent = document.querySelector('[class*="ymaps"]');
                        }

                        if (!balloonContent) {
                            console.log('‚ùå –ë–∞–ª—É–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');
                            return null;
                        }

                        console.log('‚úÖ –ë–∞–ª—É–Ω –Ω–∞–π–¥–µ–Ω:', balloonContent.className);

                        // –ü–æ–ª—É—á–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
                        const htmlContent = balloonContent.innerHTML;
                        console.log('üìè –†–∞–∑–º–µ—Ä HTML:', htmlContent.length, '—Å–∏–º–≤–æ–ª–æ–≤');

                        // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –±–∞–ª—É–Ω–µ
                        const links = balloonContent.querySelectorAll('a');
                        console.log('üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:', links.length);

                        const foundLinks = [];
                        let firstValidName = null;

                        if (links.length > 0) {
                            for (let i = 0; i < links.length; i++) {
                                const link = links[i];
                                const linkText = link.textContent.trim();
                                console.log(`üîó –°—Å—ã–ª–∫–∞ ${i + 1}: "${linkText}"`);
                                foundLinks.push(linkText);

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É–∂–µ–±–Ω–∞—è —Å—Å—ã–ª–∫–∞
                                if (isValidVenueName(linkText)) {
                                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                    if (!firstValidName) {
                                        firstValidName = linkText;
                                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Å—Å—ã–ª–∫–µ: "${linkText}"`);
                                    }
                                }
                            }
                        }

                        // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        const headers = balloonContent.querySelectorAll('h1, h2, h3, h4, h5, h6');
                        console.log('üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', headers.length);

                        for (let header of headers) {
                            const headerText = header.textContent.trim();
                            console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${headerText}"`);
                            foundLinks.push(headerText);

                            if (isValidVenueName(headerText)) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                if (!firstValidName) {
                                    firstValidName = headerText;
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: "${headerText}"`);
                                }
                            }
                        }

                        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–ª–∞—Å—Å–∞–º–∏ name/title
                        const nameElements = balloonContent.querySelectorAll('[class*="name"], [class*="title"]');
                        console.log('üè∑Ô∏è –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å name/title:', nameElements.length);

                        for (let element of nameElements) {
                            const elementText = element.textContent.trim();
                            console.log(`üè∑Ô∏è –≠–ª–µ–º–µ–Ω—Ç —Å name/title: "${elementText}"`);
                            foundLinks.push(elementText);

                            if (isValidVenueName(elementText)) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                if (!firstValidName) {
                                    firstValidName = elementText;
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å name/title: "${elementText}"`);
                                }
                            }
                        }

                        // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –∏—â–µ–º –ø–µ—Ä–≤—ã–π –∑–Ω–∞—á–∏–º—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                        const allElements = balloonContent.querySelectorAll('*');
                        console.log('üîç –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–ª—É–Ω–µ:', allElements.length);

                        for (let element of allElements) {
                            const text = element.textContent.trim();
                            if (isValidVenueName(text)) {
                                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ –≤–∞–ª–∏–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                                if (!firstValidName) {
                                    firstValidName = text;
                                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ: "${text}"`);
                                }
                            }
                        }

                        if (firstValidName) {
                            console.log(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${firstValidName}"`);
                            return { name: firstValidName, links: foundLinks };
                        } else {
                            console.log('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                            return { name: null, links: foundLinks };
                        }

                    } catch (error) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
                        return { name: null, links: [] };
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function isValidVenueName(name) {
                    return name && name.length > 2 && name.length < 100 &&
                        !name.includes('Share') && !name.includes('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è') &&
                        !name.includes('–¢–µ–ª–µ—Ñ–æ–Ω') && !name.includes('–ê–¥—Ä–µ—Å') &&
                        !name.includes('–ß–∞—Å—ã') && !name.includes('–†–µ–π—Ç–∏–Ω–≥') &&
                        !name.includes('–û—Ç–∫—Ä—ã—Ç–æ') && !name.includes('–ó–∞–∫—Ä—ã—Ç–æ') &&
                        !name.includes('www.') && !name.includes('http') &&
                        !name.includes('+7') && !name.includes('8-') &&
                        !name.match(/^\d+$/) && !name.match(/^\d+\.\d+$/) &&
                        !name.includes('–æ—Ç–∑—ã–≤') && !name.includes('–æ—Ç–∑—ã–≤–æ–≤') &&
                        !name.includes('–ü–æ–∫–∞–∑–∞—Ç—å') && !name.includes('–ù–∞–ø–∏—Å–∞—Ç—å') &&
                        !name.includes('–ü–æ–∑–≤–æ–Ω–∏—Ç—å') && !name.includes('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è') &&
                        // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "1. –ù–∞–∑–≤–∞–Ω–∏–µ")
                        !name.match(/^\d+\.\s/) && !name.match(/^\d+\s/) &&
                        // –ò—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∏
                        !name.match(/^[\d\.\s]+$/);
                }





                // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –±–∞–ª—É–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function parseBalloonAndFillVenue() {
                    console.log('=== –ü–ê–†–°–ò–ù–ì –ë–ê–õ–£–ù–ê ===');

                    const result = extractNameFromBalloon();

                    if (result.name) {
                        document.getElementById('venue-input').value = result.name;
                        console.log('‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ:', result.name);

                        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏–∑ –±–∞–ª—É–Ω–∞ –∏–ª–∏ API
                        let venueLat = null;
                        let venueLng = null;

                        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –±–∞–ª—É–Ω–∞
                        if (result.coordinates) {
                            venueLat = result.coordinates.lat;
                            venueLng = result.coordinates.lng;
                        } else {
                            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–ª—É–Ω–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–Ω—Ç—Ä–∞ –∫–∞—Ä—Ç—ã
                            const mapCenter = myMap.getCenter();
                            venueLat = mapCenter[0];
                            venueLng = mapCenter[1];
                        }

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è
                        if (venueLat && venueLng) {
                            showVenueCoordinates(result.name, venueLat, venueLng);
                        }
                    } else {
                        console.log('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                    }

                    if (result.links && result.links.length > 0) {
                        console.log('üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:', result.links.length);
                    } else {
                        console.log('‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    }

                    console.log('=====================');
                }

                // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function showVenueCoordinates(venueName, lat, lng) {
                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    const existingCoordsDiv = document.getElementById('venue-coordinates');
                    if (existingCoordsDiv) {
                        existingCoordsDiv.remove();
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è
                    const venueCoordsDisplay = document.getElementById('venue-coordinates-display');
                    if (venueCoordsDisplay) {
                        venueCoordsDisplay.value = `${lat.toFixed(6)}, ${lng.toFixed(6)}`;
                    }

                    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                    const venueLatInput = document.getElementById('venue-lat-input');
                    const venueLngInput = document.getElementById('venue-lng-input');
                    if (venueLatInput && venueLngInput) {
                        venueLatInput.value = lat.toFixed(6);
                        venueLngInput.value = lng.toFixed(6);
                    }

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                    calculateDistanceAndUpdateVenueField(venueName);

                    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã:', lat, lng);
                }

                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function updateVenueCoordinates() {
                    const venueInput = document.getElementById('venue-input');
                    let venueName = venueInput.value.trim();

                    // –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–∫–æ–±–∫–∞—Ö –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    venueName = venueName.replace(/\s*\(\d+\.?\d*\s*(–º|–∫–º)\)$/, '');

                    if (venueName) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –æ—á–∏—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è
                        clearVenueCoordinates();
                    } else {
                        // –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –ø—É—Å—Ç–æ–µ, –æ—á–∏—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è
                        clearVenueCoordinates();
                    }
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
                document.querySelector('form').addEventListener('submit', function(e) {
                    e.preventDefault();

                    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ –∑–∞–≤–µ–¥–µ–Ω–∏–µ
                    const venueInput = document.getElementById('venue-input');
                    const venueLatInput = document.getElementById('venue-lat-input');
                    const venueLngInput = document.getElementById('venue-lng-input');

                    console.log('üìç –ó–∞–≤–µ–¥–µ–Ω–∏–µ:', venueInput.value);
                    console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è:', venueLatInput.value, venueLngInput.value);

                    if (!venueInput.value.trim()) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ');
                        return;
                    }

                    if (!venueLatInput.value || !venueLngInput.value) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏
                    const termsCheckbox = document.getElementById('terms-checkbox');
                    if (!termsCheckbox.checked) {
                        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º');
                        return;
                    }

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
                    const photoInput = document.querySelector('input[name="photo"]');
                    if (photoInput.files.length > 0) {
                        const fileSize = photoInput.files[0].size;
                        const maxSize = 16 * 1024 * 1024; // 16MB
                        if (fileSize > maxSize) {
                            alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 16MB)');
                            return;
                        }
                        console.log(`üì∏ –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: ${(fileSize / 1024 / 1024).toFixed(2)} MB`);
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —á–µ—Ä–µ–∑ AJAX
                    const formData = new FormData(this);

                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                    console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', formData.get('latitude'), formData.get('longitude'));
                    console.log('üè™ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–∞—Ñ–µ:', formData.get('venue_lat'), formData.get('venue_lng'));

                    fetch('/create', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
                        console.log('üìã Content-Type:', response.headers.get('content-type'));

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                        if (!response.ok) {
                            if (response.status === 413) {
                                throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 16MB)');
                            }
                            // –î–ª—è –æ—à–∏–±–æ–∫ 400 (–≤–∫–ª—é—á–∞—è –æ—à–∏–±–∫—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON
                            if (response.status === 400) {
                                const contentType = response.headers.get('content-type');
                                if (contentType && contentType.includes('application/json')) {
                                    return response.json().then(data => {
                                        console.log('‚ùå –û—à–∏–±–∫–∞ 400:', data);
                                        if (data.error) {
                                            alert('–û–®–ò–ë–ö–ê: ' + data.error);
                                        } else {
                                            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã');
                                        }
                                    });
                                }
                            }
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            console.log('üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON –æ—Ç–≤–µ—Ç...');
                            return response.json().then(data => {
                                console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
                                if (data.success === false) {
                                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                                    console.log('‚ùå –û—à–∏–±–∫–∞:', data.error);
                                    console.log('‚ùå –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
                                    alert('–û–®–ò–ë–ö–ê: ' + data.error);
                                } else {
                                    // –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
                                    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', data.redirect);
                                    document.cookie = 'user_id=' + data.user_id + '; path=/';
                                    window.location.href = data.redirect || '/';
                                }
                            });
                        } else {
                            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
                            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞:', response.url);
                            window.location.href = response.url || '/';
                        }
                    })
                    .catch(error => {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
                        console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã: ' + error.message);
                    });
                });

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–∞–ª–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
                document.getElementById('terms-checkbox').addEventListener('change', function() {
                    const createBtn = document.getElementById('create-btn');
                    if (this.checked) {
                        createBtn.disabled = false;
                        createBtn.style.opacity = '1';
                        createBtn.style.cursor = 'pointer';
                    } else {
                        createBtn.disabled = true;
                        createBtn.style.opacity = '0.5';
                        createBtn.style.cursor = 'not-allowed';
                    }
                });

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.onload = function() {
                    initMap();

                    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                    const createBtn = document.getElementById('create-btn');
                    createBtn.disabled = true;
                    createBtn.style.opacity = '0.5';
                    createBtn.style.cursor = 'not-allowed';
                };

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤
                document.addEventListener('DOMContentLoaded', function() {
                    const nameInput = document.querySelector('input[name="name"]');
                    const ageInput = document.querySelector('input[name="age"]');
                    const hobbiesTextarea = document.querySelector('textarea[name="hobbies"]');
                    const goalTextarea = document.querySelector('textarea[name="goal"]');

                    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∏–º–µ–Ω–∏
                    if (nameInput) {
                        nameInput.addEventListener('input', function() {
                            const maxLength = 15;
                            const currentLength = this.value.length;
                            if (currentLength > maxLength) {
                                this.value = this.value.substring(0, maxLength);
                            }
                        });
                    }

                    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
                    if (ageInput) {
                        ageInput.addEventListener('input', function() {
                            const value = this.value;
                            if (value.length > 3) {
                                this.value = value.substring(0, 3);
                            }
                            if (value < 1) {
                                this.value = 1;
                            }
                            if (value > 999) {
                                this.value = 999;
                            }
                        });
                    }

                    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–≤–ª–µ—á–µ–Ω–∏–π
                    if (hobbiesTextarea) {
                        hobbiesTextarea.addEventListener('input', function() {
                            const maxLength = 100;
                            const currentLength = this.value.length;
                            if (currentLength > maxLength) {
                                this.value = this.value.substring(0, maxLength);
                            }
                        });
                    }

                    // –°—á–µ—Ç—á–∏–∫ –¥–ª—è —Ü–µ–ª–∏
                    if (goalTextarea) {
                        goalTextarea.addEventListener('input', function() {
                            const maxLength = 100;
                            const currentLength = this.value.length;
                            if (currentLength > maxLength) {
                                this.value = this.value.substring(0, maxLength);
                            }
                        });
                    }
                });
            </script>
        </body>
        </html>
    ''', navbar=navbar, get_photo_url=get_photo_url, get_starry_night_css=get_starry_night_css)


def require_profile(view_func):
    @wraps(view_func)
    def wrapper(*args, **kwargs):
        user_id = request.cookies.get('user_id')
        if not user_id or Profile.query.get(user_id) is None:
            return redirect(url_for('create_profile'))
        return view_func(*args, **kwargs)

    return wrapper


@app.route('/visitors')
@require_profile
def view_visitors():
    user_id = request.cookies.get('user_id')
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    age_from = request.args.get('age_from', type=int)
    age_to = request.args.get('age_to', type=int)
    name_query = request.args.get('name', '').strip().lower()
    hobby_query = request.args.get('hobby', '').strip().lower()
    gender_query = request.args.get('gender', '')
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
    other_profiles = [p for p in Profile.query.all() if p.id != user_id]
    if age_from is not None:
        other_profiles = [p for p in other_profiles if str(p.age).isdigit() and int(p.age) >= age_from]
    if age_to is not None:
        other_profiles = [p for p in other_profiles if str(p.age).isdigit() and int(p.age) <= age_to]
    if name_query:
        other_profiles = [p for p in other_profiles if name_query in p.name.lower()]
    if hobby_query:
        other_profiles = [p for p in other_profiles if hobby_query in p.hobbies.lower()]
    if gender_query:
        other_profiles = [p for p in other_profiles if p.gender == gender_query]
    # liked_ids —Ç–µ–ø–µ—Ä—å –∏–∑ –±–∞–∑—ã
    liked_ids = set(l.liked_id for l in Like.query.filter_by(user_id=user_id).all())
    navbar = render_navbar(user_id, active='visitors', unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id),
                           unread_matches=get_unread_matches_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –∫–∞—Ñ–µ</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 600px; margin: 0 auto; padding: 20px; }
                h1 { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }
                p { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    font-size: 1.1em;
                }
                .visitor-card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    padding: 20px; 
                    margin-bottom: 20px;
                    display: flex;
                    align-items: center;
                    position: relative;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .visitor-card:hover {
                    transform: translateY(-3px) scale(1.02);
                    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
                }
                .visitor-card img { 
                    max-width: 80px; 
                    border-radius: 10px; 
                    margin-right: 15px;
                    object-fit: cover;
                    height: 80px;
                }
                .visitor-info { flex: 1; }
                .visitor-card h2 { margin: 0 0 5px 0; }
                .visitor-card p { margin: 5px 0; color: #666; }
                .like-btn {
                    background: none;
                    border: none;
                    cursor: pointer;
                    outline: none;
                    font-size: 2em;
                    position: absolute;
                    top: 10px;
                    right: 18px;
                    z-index: 2;
                    padding: 0;
                    transition: transform 0.1s;
                }
                .like-btn:active { transform: scale(1.2); }
                .like-heart {
                    color: #bbb;
                    transition: color 0.2s;
                    text-shadow: 0 2px 8px rgba(255,107,107,0.12);
                }
                .like-heart.liked {
                    color: #ff6b6b;
                }
                .visitor-count {
                    font-size: 0.9em;
                    color: #888;
                    margin-bottom: 10px;
                    text-align: left;
                }
                .filter-form {
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 15px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                    padding: 20px 25px 15px 25px;
                    margin-bottom: 24px;
                    display: flex;
                    flex-wrap: wrap;
                    gap: 12px;
                    align-items: flex-end;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .filter-form label {
                    font-size: 0.95em;
                    color: #444;
                    margin-right: 6px;
                }
                .filter-form input, .filter-form select {
                    border: 1px solid #ccc;
                    border-radius: 6px;
                    padding: 6px 10px;
                    font-size: 1em;
                    margin-right: 10px;
                }
                .filter-form button {
                    background: linear-gradient(90deg, #ff6b6b 0%, #ffb86b 100%);
                    color: #fff;
                    border: none;
                    border-radius: 20px;
                    padding: 8px 20px;
                    font-size: 1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                }
                .filter-form button:hover {
                    box-shadow: 0 4px 16px rgba(255,107,107,0.15);
                    transform: translateY(-2px) scale(1.03);
                }
            </style>
            <script>
                function toggleLike(profileId, btn) {
                    event.stopPropagation();
                    fetch('/toggle_like/' + profileId, {method: 'POST'})
                        .then(r => r.json())
                        .then(data => {
                            if (data.liked) {
                                btn.classList.add('liked');
                            } else if (data.already_liked) {
                                btn.classList.add('liked');
                                alert('–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É!');
                            } else {
                                btn.classList.remove('liked');
                            }
                        });
                }
                function goToProfile(profileId) {
                    window.location.href = '/profile/' + profileId;
                }
            </script>
        </head>
        <body>
            {{ navbar|safe }}
            <form class="filter-form" method="get">
                <label>–í–æ–∑—Ä–∞—Å—Ç –æ—Ç <input type="number" name="age_from" min="16" max="120" value="{{ request.args.get('age_from', '') }}"></label>
                <label>–¥–æ <input type="number" name="age_to" min="16" max="120" value="{{ request.args.get('age_to', '') }}"></label>
                <label>–ò–º—è <input type="text" name="name" value="{{ request.args.get('name', '') }}" placeholder="–ò–º—è"></label>
                <label>–ò–Ω—Ç–µ—Ä–µ—Å—ã <input type="text" name="hobby" value="{{ request.args.get('hobby', '') }}" placeholder="–ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ"></label>
                <label>–ü–æ–ª
                    <select name="gender">
                        <option value="">–õ—é–±–æ–π</option>
                        <option value="male" {% if request.args.get('gender') == 'male' %}selected{% endif %}>–ú—É–∂—Å–∫–æ–π</option>
                        <option value="female" {% if request.args.get('gender') == 'female' %}selected{% endif %}>–ñ–µ–Ω—Å–∫–∏–π</option>
                        <option value="other" {% if request.args.get('gender') == 'other' %}selected{% endif %}>–î—Ä—É–≥–æ–µ</option>
                    </select>
                </label>
                <button type="submit">–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å</button>
            </form>
            <div class="visitor-count">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {{ other_profiles|length }}</div>
            <h1>–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –∫–∞—Ñ–µ</h1>
            {% if other_profiles %}
                {% for profile in other_profiles %}
                    <div class="visitor-card" onclick="goToProfile('{{ profile.id }}')">
                        <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ">
                        <div class="visitor-info">
                            <h2>{{ profile.name }}, {{ profile.age }}</h2>
                            <p>{{ profile.hobbies[:50] }}{% if profile.hobbies|length > 50 %}...{% endif %}</p>
                            {% if profile.city %}
                            <p style="color: #666; font-size: 0.9em;">üìç {{ profile.city }}</p>
                            {% endif %}
                            {% if profile.venue %}
                            <p style="color: #666; font-size: 0.9em;">üè™ {{ profile.venue }}</p>
                            {% endif %}
                        </div>
                        <button class="like-btn" title="–õ–∞–π–∫" onclick="toggleLike('{{ profile.id }}', this.querySelector('span'))">
                            <span class="like-heart{% if profile.id in liked_ids %} liked{% endif %}">&#10084;</span>
                        </button>
                    </div>
                {% endfor %}
            {% else %}
                <p>–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π.</p>
            {% endif %}
        </body>
        </html>
    ''', other_profiles=other_profiles, liked_ids=liked_ids, navbar=navbar, get_photo_url=get_photo_url,
                                  get_starry_night_css=get_starry_night_css)


@app.route('/toggle_like/<string:profile_id>', methods=['POST'])
@require_profile
def toggle_like(profile_id):
    user_id = request.cookies.get('user_id')
    if not user_id or Profile.query.get(profile_id) is None or profile_id == user_id:
        return jsonify({'liked': False, 'already_liked': False, 'likes_count': 0})
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–∞–ª –ª–∏ —É–∂–µ
    already = Like.query.filter(and_(Like.user_id == user_id, Like.liked_id == profile_id)).first()
    profile = Profile.query.get(profile_id)
    if already:
        # –£–∂–µ –ª–∞–π–∫–∞–ª
        likes_count = Like.query.filter_by(liked_id=profile_id).count()
        return jsonify({'liked': False, 'already_liked': True, 'likes_count': likes_count})
    # –ù–æ–≤—ã–π –ª–∞–π–∫
    db.session.add(Like(user_id=user_id, liked_id=profile_id))
    profile.likes = Like.query.filter_by(liked_id=profile_id).count() + 1
    db.session.commit()
    check_for_matches(user_id)
    likes_count = Like.query.filter_by(liked_id=profile_id).count()
    return jsonify({'liked': True, 'already_liked': False, 'likes_count': likes_count})


@app.route('/my_profile')
@require_profile
def my_profile():
    user_id = request.cookies.get('user_id')
    profile = Profile.query.get(user_id)
    navbar = render_navbar(user_id, active='profile', unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id),
                           unread_matches=get_unread_matches_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ú–æ—è –∞–Ω–∫–µ—Ç–∞</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { text-align: center; padding: 20px; }
                .card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    max-width: 400px; 
                    margin: 0 auto; 
                    padding: 25px;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                img { max-width: 100%; border-radius: 10px; }
                .modern-btn {
                    background: linear-gradient(90deg, #ff6b6b 0%, #ffb86b 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(255,107,107,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    margin: 5px;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 24px rgba(255,107,107,0.3);
                    transform: translateY(-2px) scale(1.03);
                }
                .back-btn {
                    background: linear-gradient(90deg, #6c757d 0%, #495057 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(108,117,125,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 20px;
                }
                .back-btn:hover {
                    box-shadow: 0 8px 24px rgba(108,117,125,0.3);
                    transform: translateY(-2px) scale(1.03);
                }
            </style>
        </head>
        <body>
            {{ navbar|safe }}
            <div class="card">
                <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ">
                <h2>{{ profile.name }}, {{ profile.age }}</h2>
                <p><strong>–£–≤–ª–µ—á–µ–Ω–∏—è:</strong> {{ profile.hobbies }}</p>
                <p><strong>–¶–µ–ª—å:</strong> {{ profile.goal }}</p>
                {% if profile.city %}
                <p><strong>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {{ profile.city }}</p>
                {% endif %}
                {% if profile.venue %}
                <p><strong>üè™ –ó–∞–≤–µ–¥–µ–Ω–∏–µ:</strong> {{ profile.venue }}</p>
                {% endif %}
                <form action="/edit_profile" method="get" style="display:inline;">
                    <button type="submit" class="modern-btn" style="background: #4CAF50;">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                </form>
                <form action="/delete/{{ profile.id }}" method="post" style="display:inline;">
                    <button type="submit" class="modern-btn" style="background: #b00020;">–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É</button>
                </form>
                <a href="/" class="back-btn">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </div>
        </body>
        </html>
    ''', profile=profile, navbar=navbar, get_photo_url=get_photo_url, get_starry_night_css=get_starry_night_css)


@app.route('/edit_profile', methods=['GET', 'POST'])
@require_profile
def edit_profile():
    user_id = request.cookies.get('user_id')
    profile = Profile.query.get(user_id)
    if request.method == 'POST':
        profile.name = request.form['name']
        profile.age = int(request.form['age'])
        profile.gender = request.form['gender']
        profile.hobbies = request.form['hobbies']
        profile.goal = request.form['goal']
        profile.venue = request.form.get('venue')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        latitude = request.form.get('latitude')
        longitude = request.form.get('longitude')
        if latitude and longitude:
            profile.latitude = float(latitude)
            profile.longitude = float(longitude)

        # –°–º–µ–Ω–∞ —Ñ–æ—Ç–æ
        photo = request.files.get('photo')
        if photo and photo.filename:
            try:
                if profile.photo:
                    os.remove(os.path.join(app.config['UPLOAD_FOLDER'], profile.photo))
            except:
                pass
            filename = f"{user_id}_{photo.filename}"
            photo_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            photo.save(photo_path)
            profile.photo = filename
        db.session.commit()
        return redirect(url_for('my_profile'))
    navbar = render_navbar(
        user_id,
        active='profile',
        unread_messages=get_unread_messages_count(user_id),
        unread_likes=get_unread_likes_count(user_id),
        unread_matches=get_unread_matches_count(user_id)
    )
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 500px; margin: 0 auto; padding: 20px; }
                input, textarea, select { 
                    width: 100%; 
                    padding: 12px; 
                    margin: 10px 0; 
                    background: rgba(255, 255, 255, 0.9);
                    border: 1px solid rgba(255, 255, 255, 0.3);
                    border-radius: 10px;
                    color: #333;
                    font-size: 1em;
                }
                input:focus, textarea:focus, select:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 15px rgba(102, 126, 234, 0.3);
                }
                label {
                    color: #fff;
                    font-weight: bold;
                    text-shadow: 0 0 5px rgba(255, 255, 255, 0.3);
                }
                h2 {
                    color: #fff;
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }
                .modern-btn {
                    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 25px;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    font-weight: bold;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
                    transform: translateY(-3px) scale(1.05);
                }
                .back-btn {
                    background: linear-gradient(90deg, #6c757d 0%, #495057 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(108,117,125,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 20px;
                }
                .back-btn:hover {
                    box-shadow: 0 8px 24px rgba(108,117,125,0.3);
                    transform: translateY(-2px) scale(1.03);
                }

                .map-container {
                    margin: 20px 0;
                    border-radius: 15px;
                    overflow: hidden;
                    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
                }

                #map {
                    width: 100%;
                    height: 300px;
                    border-radius: 15px;
                }

                .location-info {
                    background: rgba(255, 255, 255, 0.9);
                    padding: 15px;
                    border-radius: 10px;
                    margin: 10px 0;
                    color: #333;
                }

                .location-btn {
                    background: linear-gradient(90deg, #4CAF50 0%, #81c784 100%);
                    color: white;
                    border: none;
                    padding: 10px 20px;
                    border-radius: 20px;
                    font-size: 1em;
                    cursor: pointer;
                    margin: 5px;
                    transition: all 0.3s ease;
                }
                .location-btn:hover {
                    box-shadow: 0 4px 16px rgba(76,175,80,0.3);
                    transform: translateY(-2px);
                }
            </style>
            <script src="https://api-maps.yandex.ru/2.1/?apikey=9a3beffb-a8a0-4d55-850f-d258dd28c104&lang=ru_RU" type="text/javascript"></script>
            <script>
                let myMap, myPlacemark;
                let currentLocation = null;

                function initMap() {
                    ymaps.ready(function () {
                        myMap = new ymaps.Map('map', {
                            center: [55.76, 37.64], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            zoom: 10,
                            controls: ['zoomControl', 'fullscreenControl']
                        });

                        myMap.events.add('click', function (e) {
                            var coords = e.get('coords');
                            setLocation(coords[0], coords[1]);
                        });
                    });
                }

                function setLocation(lat, lng) {
                    currentLocation = {lat: lat, lng: lng};

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
                    document.getElementById('latitude-input').value = lat;
                    document.getElementById('longitude-input').value = lng;

                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ—Ç–∫—É
                    if (myPlacemark) {
                        myMap.geoObjects.remove(myPlacemark);
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
                    myPlacemark = new ymaps.Placemark([lat, lng], {
                        balloonContent: '–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
                    }, {
                        preset: 'islands#redDotIcon'
                    });

                    myMap.geoObjects.add(myPlacemark);
                    myMap.setCenter([lat, lng], 15);

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    document.getElementById('location-address').textContent = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
                    document.getElementById('location-coords').textContent = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ' + lat.toFixed(4) + ', ' + lng.toFixed(4);
                    document.getElementById('location-info').style.display = 'block';

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –≤–≤–µ–¥–µ–Ω–æ
                    const venueInput = document.getElementById('venue-input');
                    if (venueInput && venueInput.value.trim()) {
                        updateVenueCoordinates();
                    }
                }

                function getCurrentLocation() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                            function(position) {
                                var lat = position.coords.latitude;
                                var lng = position.coords.longitude;
                                setLocation(lat, lng);
                            },
                            function(error) {
                                alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            },
                            {
                                enableHighAccuracy: false,
                                timeout: 5000,
                                maximumAge: 300000
                            }
                        );
                } else {
                        alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.');
                    }
                }

                function clearLocation() {
                    currentLocation = null;
                    document.getElementById('latitude-input').value = '';
                    document.getElementById('longitude-input').value = '';
                    document.getElementById('location-info').style.display = 'none';

                    if (myPlacemark) {
                        myMap.geoObjects.remove(myPlacemark);
                        myPlacemark = null;
                    }

                    // –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                    const existingCoordsDiv = document.getElementById('venue-coordinates');
                    if (existingCoordsDiv) {
                        existingCoordsDiv.remove();
                    }
                }

                // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function showVenueCoordinates(venueName, lat, lng) {
                    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    const existingCoordsDiv = document.getElementById('venue-coordinates');
                    if (existingCoordsDiv) {
                        existingCoordsDiv.remove();
                    }

                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    const coordsDiv = document.createElement('div');
                    coordsDiv.id = 'venue-coordinates';
                    coordsDiv.style.cssText = `
                        background: rgba(76, 175, 80, 0.1);
                        border: 1px solid rgba(76, 175, 80, 0.3);
                        border-radius: 8px;
                        padding: 10px;
                        margin: 10px 0;
                        color: #fff;
                        font-size: 0.9em;
                    `;

                    coordsDiv.innerHTML = `
                        <strong>üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è "${venueName}":</strong><br>
                        <span style="font-family: monospace; background: rgba(0,0,0,0.2); padding: 2px 6px; border-radius: 4px;">
                            ${lat.toFixed(6)}, ${lng.toFixed(6)}
                        </span>
                    `;

                    // –í—Å—Ç–∞–≤–ª—è–µ–º –±–ª–æ–∫ –ø–æ—Å–ª–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∑–∞–≤–µ–¥–µ–Ω–∏—è
                    const venueInput = document.getElementById('venue-input');
                    venueInput.parentNode.insertBefore(coordsDiv, venueInput.nextSibling);

                    console.log('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã:', lat, lng);
                }

                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
                function updateVenueCoordinates() {
                    const venueInput = document.getElementById('venue-input');
                    const venueName = venueInput.value.trim();

                    if (venueName && currentLocation) {
                        showVenueCoordinates(venueName, currentLocation.lat, currentLocation.lng);
                    } else if (venueName) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                        const existingCoordsDiv = document.getElementById('venue-coordinates');
                        if (existingCoordsDiv) {
                            existingCoordsDiv.remove();
                        }

                        const coordsDiv = document.createElement('div');
                        coordsDiv.id = 'venue-coordinates';
                        coordsDiv.style.cssText = `
                            background: rgba(255, 193, 7, 0.1);
                            border: 1px solid rgba(255, 193, 7, 0.3);
                            color: #fff;
                            border-radius: 8px;
                            padding: 10px;
                            margin: 10px 0;
                            font-size: 0.9em;
                        `;

                        coordsDiv.innerHTML = `
                            <strong>‚ö†Ô∏è –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–∞–≤–µ–¥–µ–Ω–∏—è "${venueName}" –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ</strong>
                        `;

                        venueInput.parentNode.insertBefore(coordsDiv, venueInput.nextSibling);
                    }
                }

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.onload = function() {
                    initMap();

                    // –ï—Å–ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –∫–∞–∫ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                    {% if profile.latitude and profile.longitude %}
                    currentLocation = {
                        lat: {{ profile.latitude }},
                        lng: {{ profile.longitude }}
                    };

                    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    {% if profile.venue %}
                    setTimeout(function() {
                        showVenueCoordinates('{{ profile.venue }}', {{ profile.latitude }}, {{ profile.longitude }});
                    }, 1000);
                    {% endif %}
                    {% endif %}
                };
            </script>
        </head>
        <body>
            {{ navbar|safe }}
            <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É</h2>
            <form method="post" enctype="multipart/form-data">
                <input type="text" name="name" placeholder="–í–∞—à–µ –∏–º—è" value="{{ profile.name }}" required>
                <input type="number" name="age" placeholder="–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç" value="{{ profile.age }}" required>
                <select name="gender" required>
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª</option>
                    <option value="male" {% if profile.gender == 'male' %}selected{% endif %}>–ú—É–∂—Å–∫–æ–π</option>
                    <option value="female" {% if profile.gender == 'female' %}selected{% endif %}>–ñ–µ–Ω—Å–∫–∏–π</option>
                    <option value="other" {% if profile.gender == 'other' %}selected{% endif %}>–î—Ä—É–≥–æ–µ</option>
                </select>
                <textarea name="hobbies" placeholder="–í–∞—à–∏ —É–≤–ª–µ—á–µ–Ω–∏—è" required>{{ profile.hobbies }}</textarea>
                <textarea name="goal" placeholder="–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞" required>{{ profile.goal }}</textarea>

                <div class="map-container">
                    <div id="map"></div>
                    <div class="location-info" id="location-info" style="display: {% if profile.latitude and profile.longitude %}block{% else %}none{% endif %};">
                        <strong>–í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong><br>
                        <span id="location-address">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</span><br>
                        <small>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: <span id="location-coords">{% if profile.latitude and profile.longitude %}{{ profile.latitude }}, {{ profile.longitude }}{% else %}-{% endif %}</span></small>
                    </div>
                    <div style="text-align: center; margin: 10px 0;">
                        <button type="button" class="location-btn" onclick="getCurrentLocation()">üìç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
                        <button type="button" class="location-btn" onclick="clearLocation()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å</button>
                    </div>
                </div>

                <input type="hidden" name="latitude" id="latitude-input" value="{{ profile.latitude or '' }}">
                <input type="hidden" name="longitude" id="longitude-input" value="{{ profile.longitude or '' }}">

                <input type="text" name="venue" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è" value="{{ profile.venue or '' }}" required onchange="updateVenueCoordinates()">
                <input type="file" name="photo" accept="image/*">
                <button type="submit" class="modern-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
            </form>
            <a href="/my_profile" class="back-btn">‚Üê –ù–∞–∑–∞–¥</a>
        </body>
        </html>
    ''', profile=profile, navbar=navbar, get_photo_url=get_photo_url, get_starry_night_css=get_starry_night_css)


@app.route('/my_likes')
@require_profile
def my_likes():
    user_id = request.cookies.get('user_id')
    # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö, –∫—Ç–æ –º–µ–Ω—è –ª–∞–π–∫–Ω—É–ª
    liked_me_profiles = []
    liked_me_ids = set()
    for like in Like.query.filter_by(liked_id=user_id).all():
        liker_profile = Profile.query.get(like.user_id)
        if liker_profile:
            liked_me_profiles.append(liker_profile)
            liked_me_ids.add(liker_profile.id)
    navbar = render_navbar(user_id, active='likes', unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ú–µ–Ω—è –ª–∞–π–∫–Ω—É–ª–∏</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 600px; margin: 0 auto; padding: 20px; }
                h1 { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }
                p { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    font-size: 1.1em;
                }
                .like-card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    padding: 20px; 
                    margin-bottom: 20px; 
                    display: flex; 
                    align-items: center; 
                    position: relative; 
                    cursor: pointer; 
                    transition: all 0.3s ease;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .like-card:hover { 
                    transform: translateY(-3px) scale(1.02);
                    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
                }
                .like-card img { max-width: 80px; border-radius: 10px; margin-right: 15px; object-fit: cover; height: 80px; }
                .like-info { flex: 1; }
                .like-card h2 { margin: 0 0 5px 0; color: #333; }
                .like-card p { margin: 5px 0; color: #666; }
                .like-btn { background: none; border: none; cursor: pointer; outline: none; font-size: 2em; position: absolute; top: 10px; right: 18px; z-index: 2; padding: 0; transition: transform 0.1s; }
                .like-btn:active { transform: scale(1.2); }
                .like-heart { color: #bbb; transition: color 0.2s; text-shadow: 0 2px 8px rgba(255,107,107,0.12); }
                .like-heart.liked { color: #ff6b6b; }
                .back-btn { background: linear-gradient(90deg, #6c757d 0%, #495057 100%); color: white; border: none; padding: 12px 24px; border-radius: 25px; box-shadow: 0 4px 14px rgba(108,117,125,0.2); font-size: 1.1em; cursor: pointer; transition: box-shadow 0.2s, transform 0.2s; text-decoration: none; display: inline-block; margin-top: 20px; }
                .back-btn:hover { box-shadow: 0 8px 24px rgba(108,117,125,0.3); transform: translateY(-2px) scale(1.03); }
            </style>
            <script>
                // –û—Ç–º–µ—á–∞–µ–º –ª–∞–π–∫–∏ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.addEventListener('load', function() {
                    fetch('/api/mark_likes_read', {method: 'POST'})
                        .then(r => r.json())
                        .then(data => {
                            if (data.success) {
                                console.log('‚úÖ –õ–∞–π–∫–∏ –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', data.marked_count);
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–±–∞—Ä–µ
                                const likeBadge = document.getElementById('like-badge');
                                if (likeBadge) {
                                    likeBadge.style.display = 'none';
                                }
                            }
                        })
                        .catch(error => {
                            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ª–∞–π–∫–æ–≤:', error);
                        });
                });

                function toggleLike(profileId, btn) {
                    event.stopPropagation();
                    fetch('/toggle_like/' + profileId, {method: 'POST'})
                        .then(r => r.json())
                        .then(data => {
                            if (data.liked) {
                                btn.classList.add('liked');
                            } else if (data.already_liked) {
                                btn.classList.add('liked');
                                alert('–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç—É –∞–Ω–∫–µ—Ç—É!');
                            } else {
                                btn.classList.remove('liked');
                            }
                        });
                }
                function goToProfile(profileId) {
                    window.location.href = '/profile/' + profileId;
                }
            </script>
        </head>
        <body>
            {{ navbar|safe }}
            <h1>–ú–µ–Ω—è –ª–∞–π–∫–Ω—É–ª–∏</h1>
            {% if liked_me_profiles %}
                {% for profile in liked_me_profiles %}
                    <div class="like-card" onclick="goToProfile('{{ profile.id }}')">
                        <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ">
                        <div class="like-info">
                        <h2>{{ profile.name }}, {{ profile.age }}</h2>
                            <p>{{ profile.hobbies[:50] }}{% if profile.hobbies|length > 50 %}...{% endif %}</p>
                            {% if profile.city %}
                            <p style="color: #666; font-size: 0.9em;">üìç {{ profile.city }}</p>
                            {% endif %}
                            {% if profile.venue %}
                            <p style="color: #666; font-size: 0.9em;">üè™ {{ profile.venue }}</p>
                            {% endif %}
                        </div>
                        <button class="like-btn" title="–õ–∞–π–∫" onclick="toggleLike('{{ profile.id }}', this.querySelector('span'))">
                            <span class="like-heart{% if profile.id in liked_ids %} liked{% endif %}">&#10084;</span>
                        </button>
                    </div>
                {% endfor %}
            {% else %}
                <p>–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ª–∞–π–∫–Ω—É–ª –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.</p>
            {% endif %}
        </body>
        </html>
    ''', liked_me_profiles=liked_me_profiles, navbar=navbar, get_photo_url=get_photo_url,
                                  liked_ids=set(l.liked_id for l in Like.query.filter_by(user_id=user_id).all()),
                                  get_starry_night_css=get_starry_night_css)


@app.route('/profile/<string:id>')
@require_profile
def view_profile(id):
    profile = Profile.query.get(id)
    if not profile:
        return "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404
    user_id = request.cookies.get('user_id')
    is_owner = profile.id == user_id
    navbar = render_navbar(user_id, active=None, unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ê–Ω–∫–µ—Ç–∞</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { text-align: center; padding: 20px; }
                .card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    max-width: 400px; 
                    margin: 0 auto; 
                    padding: 25px;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                img { max-width: 100%; border-radius: 10px; }
                .modern-btn {
                    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 25px;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    margin: 5px;
                    font-weight: bold;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
                    transform: translateY(-3px) scale(1.05);
                }
                .back-btn {
                    background: linear-gradient(90deg, #6c757d 0%, #495057 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(108,117,125,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 20px;
                }
                .back-btn:hover {
                    box-shadow: 0 8px 24px rgba(108,117,125,0.3);
                    transform: translateY(-2px) scale(1.03);
                }
            </style>
        </head>
        <body>
            {{ navbar|safe }}
            <div class="card">
                <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ">
                <h2>{{ profile.name }}, {{ profile.age }}</h2>
                <p><strong>–£–≤–ª–µ—á–µ–Ω–∏—è:</strong> {{ profile.hobbies }}</p>
                <p><strong>–¶–µ–ª—å:</strong> {{ profile.goal }}</p>
                {% if profile.city %}
                <p><strong>üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</strong> {{ profile.city }}</p>
                {% endif %}
                {% if profile.venue %}
                <p><strong>üè™ –ó–∞–≤–µ–¥–µ–Ω–∏–µ:</strong> {{ profile.venue }}</p>
                {% endif %}
                {% if not is_owner %}
                    <form action="/like/{{ profile.id }}" method="post">
                        <button type="submit" class="modern-btn">‚ù§Ô∏è –õ–∞–π–∫</button>
                    </form>
                {% endif %}
                {% if is_owner %}
                    <form action="/delete/{{ profile.id }}" method="post">
                        <button type="submit" class="modern-btn" style="background: #b00020;">–£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É</button>
                    </form>
                {% endif %}
                <a href="/visitors" class="back-btn">‚Üê –ù–∞–∑–∞–¥ –∫ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º</a>
            </div>
        </body>
        </html>
    ''', profile=profile, is_owner=is_owner, navbar=navbar, get_photo_url=get_photo_url,
                                  get_starry_night_css=get_starry_night_css)


@app.route('/like/<string:id>', methods=['POST'])
@require_profile
def like_profile(id):
    if Profile.query.get(id) is None:
        return "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('home'))
    if Profile.query.get(id).id == user_id:
        return "–ù–µ–ª—å–∑—è –ª–∞–π–∫–Ω—É—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É", 400
    if Like.query.filter_by(user_id=user_id, liked_id=id).first():
        return "–í—ã —É–∂–µ –ª–∞–π–∫–Ω—É–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 400
    db.session.add(Like(user_id=user_id, liked_id=id))
    profile = Profile.query.get(id)
    if profile:
        profile.likes += 1
    db.session.commit()
    check_for_matches(user_id)
    return redirect(url_for('view_profile', id=id))


@app.route('/delete/<string:id>', methods=['POST'])
@require_profile
def delete_profile(id):
    profile = Profile.query.get(id)
    if not profile:
        return "–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 404
    user_id = request.cookies.get('user_id')
    if not user_id:
        return redirect(url_for('home'))
    if profile.id != user_id:
        return "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —á—É–∂—É—é –∞–Ω–∫–µ—Ç—É", 403
    try:
        os.remove(os.path.join(app.config['UPLOAD_FOLDER'], profile.photo))
    except:
        pass
    db.session.delete(profile)
    db.session.commit()
    return redirect(url_for('home'))


@app.route('/my_matches')
@require_profile
def my_matches():
    user_id = request.cookies.get('user_id')
    liked_ids = set(l.liked_id for l in Like.query.filter_by(user_id=user_id).all())
    liked_me_ids = set(l.user_id for l in Like.query.filter_by(liked_id=user_id).all())
    matches_ids = liked_ids & liked_me_ids
    matched_profiles = [Profile.query.get(mid) for mid in matches_ids if Profile.query.get(mid)]
    # –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –º—ç—Ç—á–µ–π
    new_matches[user_id].clear()
    navbar = render_navbar(user_id, active='matches', unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id), unread_matches=0)
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ú–æ–∏ –º—ç—Ç—á–∏</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 600px; margin: 0 auto; padding: 20px; }
                h1 { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }
                p { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    font-size: 1.1em;
                }
                .match-card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    padding: 20px; 
                    margin-bottom: 20px;
                    display: flex;
                    align-items: center;
                    gap: 20px;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    transition: all 0.3s ease;
                }
                .match-card:hover {
                    transform: translateY(-3px) scale(1.02);
                    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
                }
                .match-photo {
                    width: 80px;
                    height: 80px;
                    border-radius: 50%;
                    object-fit: cover;
                    border: 3px solid #4CAF50;
                }
                .match-info {
                    flex: 1;
                }
                .modern-btn {
                    background: linear-gradient(90deg, #4CAF50 0%, #81c784 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(76,175,80,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    margin-top: 10px;
                    text-decoration: none;
                    display: inline-block;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 24px rgba(76,175,80,0.3);
                    transform: translateY(-2px) scale(1.03);
                }
            </style>
        </head>
        <body>
            {{ navbar|safe }}
            <h1>–ú–æ–∏ –º—ç—Ç—á–∏</h1>
            {% if matched_profiles %}
                {% for profile in matched_profiles %}
                    <div class="match-card">
                        <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ" class="match-photo">
                        <div class="match-info">
                            <h2 style="margin: 0 0 10px 0;">{{ profile.name }}, {{ profile.age }}</h2>
                            {% if profile.city %}
                            <p style="color: #666; margin: 5px 0;">üìç {{ profile.city }}</p>
                            {% endif %}
                            {% if profile.venue %}
                            <p style="color: #666; margin: 5px 0;">üè™ {{ profile.venue }}</p>
                            {% endif %}
                        </div>
                        <a href="/chat/{{ profile.id }}" class="modern-btn">–ß–∞—Ç</a>
                    </div>
                {% endfor %}
            {% else %}
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π.</p>
            {% endif %}
        </body>
        </html>
    ''', matched_profiles=matched_profiles, navbar=navbar, get_photo_url=get_photo_url,
                                  get_starry_night_css=get_starry_night_css)


@app.route('/my_messages')
@require_profile
def my_messages():
    user_id = request.cookies.get('user_id')
    chat_keys = set()
    for msg in Message.query.all():
        ids = msg.chat_key.split('_')
        if user_id in ids:
            chat_keys.add(msg.chat_key)
    chat_partners = set()
    for chat_key in chat_keys:
        ids = chat_key.split('_')
        for uid in ids:
            if uid != user_id:
                chat_partners.add(uid)
    chat_profiles = [p for p in Profile.query.all() if p.id in chat_partners]
    # –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    unread_by_partner = {}
    for partner_id in chat_partners:
        chat_key = '_'.join(sorted([user_id, partner_id]))
        unread_by_partner[partner_id] = Message.query.filter_by(chat_key=chat_key).filter(
            Message.sender == partner_id).filter((Message.read_by.is_(None)) | (Message.read_by != user_id)).count()
    unread_messages = get_unread_messages_count(user_id)
    navbar = render_navbar(user_id, active='messages', unread_messages=unread_messages,
                           unread_likes=get_unread_likes_count(user_id),
                           unread_matches=get_unread_matches_count(user_id))
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 600px; margin: 0 auto; padding: 20px; }
                h1 { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 25px;
                    font-size: 1.8em;
                }
                p { 
                    color: #fff; 
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    font-size: 1.1em;
                }
                .chat-card { 
                    background: rgba(255, 255, 255, 0.95); 
                    border-radius: 15px; 
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3); 
                    padding: 20px; 
                    margin-bottom: 20px;
                    display: flex;
                    align-items: center;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .chat-card:hover {
                    transform: translateY(-3px) scale(1.02);
                    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.4);
                }
                .chat-card img {
                    width:60px;
                    height:60px;
                    border-radius:50%;
                    margin-right:15px;
                    object-fit:cover;
                    border: 2px solid #667eea;
                }
                .chat-info { flex: 1; }
                .chat-card h2 { margin: 0 0 5px 0; color: #333; }
                .chat-card p { margin: 5px 0; color: #666; }
                .unread-badge {
                    background: #ff6b6b;
                    color: white;
                    border-radius: 50%;
                    width: 20px;
                    height: 20px;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 0.8em;
                    font-weight: bold;
                }
                .back-btn {
                    background: linear-gradient(90deg, #6c757d 0%, #495057 100%);
                    color: white;
                    border: none;
                    padding: 12px 24px;
                    border-radius: 25px;
                    box-shadow: 0 4px 14px rgba(108,117,125,0.2);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: box-shadow 0.2s, transform 0.2s;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 20px;
                }
                .back-btn:hover {
                    box-shadow: 0 8px 24px rgba(108,117,125,0.3);
                    transform: translateY(-2px) scale(1.03);
                }
            </style>
            <script>
                function goToChat(profileId) {
                    window.location.href = '/chat/' + profileId;
                }
            </script>
        </head>
        <body>
            {{ navbar|safe }}
            <h1>–ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è</h1>
            {% if chat_profiles %}
                {% for profile in chat_profiles %}
                    <div class="chat-card" onclick="goToChat('{{ profile.id }}')">
                        <img src="{{ get_photo_url(profile) }}" alt="–§–æ—Ç–æ">
                        <div class="chat-info">
                            <h2>{{ profile.name }}, {{ profile.age }}</h2>
                            {% if profile.venue %}
                            <p style="color: #666; font-size: 0.9em;">üè™ {{ profile.venue }}</p>
                            {% endif %}
                        </div>
                        {% if unread_by_partner[profile.id] > 0 %}
                            <div class="unread-badge">{{ unread_by_partner[profile.id] }}</div>
                        {% endif %}
                    </div>
                {% endfor %}
            {% else %}
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.</p>
            {% endif %}
        </body>
        </html>
    ''', chat_profiles=chat_profiles, navbar=navbar, get_photo_url=get_photo_url, unread_by_partner=unread_by_partner,
                                  get_starry_night_css=get_starry_night_css)


@app.route('/chat/<string:other_user_id>', methods=['GET', 'POST'])
@require_profile
def chat(other_user_id):
    user_id = request.cookies.get('user_id')
    liked_ids = set(l.liked_id for l in Like.query.filter_by(user_id=user_id).all())
    liked_me_ids = set(l.user_id for l in Like.query.filter_by(liked_id=user_id).all())
    matches_ids = liked_ids & liked_me_ids
    if other_user_id not in matches_ids:
        return "–ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –º—ç—Ç—á–µ–π", 403
    other_profile = Profile.query.get(other_user_id)
    if not other_profile:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
    chat_key = '_'.join(sorted([user_id, other_user_id]))
    # –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    for msg in Message.query.filter_by(chat_key=chat_key).filter(Message.sender == other_user_id).all():
        if msg.read_by != user_id:
            msg.read_by = user_id
    db.session.commit()
    navbar = render_navbar(user_id, active='messages', unread_messages=get_unread_messages_count(user_id),
                           unread_likes=get_unread_likes_count(user_id),
                           unread_matches=get_unread_matches_count(user_id))
    if request.method == 'POST':
        message = request.form.get('message')
        if message:
            db.session.add(Message(chat_key=chat_key, sender=user_id, text=message))
            db.session.commit()
    messages_db = Message.query.filter_by(chat_key=chat_key).order_by(Message.timestamp).all()
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ß–∞—Ç</title>
            <style>
                {{ get_starry_night_css()|safe }}
                body { max-width: 600px; margin: 0 auto; padding: 20px; }
                .chat-header {
                    background: rgba(255, 255, 255, 0.95);
                    border-radius: 15px;
                    padding: 20px;
                    margin-bottom: 20px;
                    display: flex;
                    align-items: center;
                    gap: 15px;
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .chat-photo {
                    width: 60px;
                    height: 60px;
                    border-radius: 50%;
                    object-fit: cover;
                    border: 3px solid #667eea;
                }
                .chat-info h1 {
                    margin: 0;
                    font-size: 1.4em;
                    color: #333;
                }
                .chat-info p {
                    margin: 5px 0 0 0;
                    color: #666;
                    font-size: 0.9em;
                }
                .message { 
                    margin: 10px; 
                    padding: 15px; 
                    border-radius: 15px; 
                    max-width: 70%; 
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                }
                .my-message { 
                    background: rgba(220, 248, 198, 0.9); 
                    margin-left: auto; 
                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
                }
                .their-message { 
                    background: rgba(255, 255, 255, 0.9); 
                    margin-right: auto; 
                    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
                }
                .modern-btn {
                    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 25px;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    margin-top: 10px;
                    font-weight: bold;
                    align-self: center;
                }
                .modern-btn:hover {
                    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
                    transform: translateY(-3px) scale(1.05);
                }
                #messages { min-height: 200px; }
                #chat-form { 
                    display: flex; 
                    flex-direction: column; 
                    align-items: center; 
                    margin-top: 20px; 
                    width: 100%;
                }
                #message-input {
                    width: 100%;
                    max-width: 500px;
                    padding: 15px;
                    font-size: 1.1em;
                    border-radius: 15px;
                    border: 1px solid rgba(255, 255, 255, 0.3);
                    background: rgba(255, 255, 255, 0.9);
                    min-height: 48px;
                    margin-bottom: 10px;
                    resize: none;
                    backdrop-filter: blur(10px);
                    box-sizing: border-box;
                }
                #message-input:focus {
                    outline: none;
                    border-color: #667eea;
                    box-shadow: 0 0 15px rgba(102, 126, 234, 0.3);
                }

                .typing-indicator {
                    background: rgba(255, 255, 255, 0.9);
                    border-radius: 12px;
                    padding: 8px 12px;
                    margin: 8px;
                    font-size: 0.8em;
                    color: #666;
                    display: none;
                    backdrop-filter: blur(10px);
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    align-self: flex-start;
                    max-width: 200px;
                }

                .typing-indicator.show {
                    display: block;
                }

                .typing-dots {
                    display: inline-block;
                    animation: typing 1.4s infinite;
                }

                @keyframes typing {
                    0%, 20% { opacity: 0; }
                    50% { opacity: 1; }
                    100% { opacity: 0; }
                }

                .typing-indicator {
                    animation: slideIn 0.3s ease-out;
                }

                @keyframes slideIn {
                    from {
                        opacity: 0;
                        transform: translateY(-10px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
            </style>

        </head>
        <body>
            {{ navbar|safe }}
            <div class="chat-header">
                <img src="{{ get_photo_url(other_profile) }}" alt="–§–æ—Ç–æ" class="chat-photo">
                <div class="chat-info">
                    <h1>–ß–∞—Ç —Å {{ other_profile.name }}</h1>
                    {% if other_profile.venue %}
                    <p>üè™ {{ other_profile.venue }}</p>
                    {% endif %}
                </div>
            </div>
            <div id="messages">
                {% for m in messages_db %}
                    <div class="message {{ 'my-message' if m.sender == user_id else 'their-message' }}">
                        {{ m.text }}
                        <div style="font-size: 0.8em; color: #666; margin-top: 5px; text-align: right;">
                            {{ m.timestamp.strftime('%H:%M') }}
                        </div>
                    </div>
                {% endfor %}
            </div>
            <div class="typing-indicator" id="typing-indicator">
                <span>{{ other_profile.name }} –ø–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ</span><span class="typing-dots">...</span>
            </div>
            <form id="chat-form" autocomplete="off">
                <textarea id="message-input" name="message" placeholder="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." maxlength="400" required></textarea>
                <button type="submit" class="modern-btn">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </form>
            <script>
                const user_id = "{{ user_id }}";
                const chat_key = "{{ chat_key }}";
                const other_user_id = "{{ other_profile.id }}";
                let lastMessageCount = {{ messages_db|length }};
                let lastMessageTimestamp = "{{ messages_db[-1].timestamp.isoformat() if messages_db else '' }}";

                // –ü—Ä–æ—Å—Ç–æ–π AJAX —á–∞—Ç –±–µ–∑ Socket.IO

                // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                function addMessage(msg, sender, timestamp = null) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    const messages = document.querySelectorAll('.message');
                    const lastMessage = messages[messages.length - 1];

                    if (lastMessage && lastMessage.textContent.trim() === msg.trim()) {
                        // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
                        return;
                    }

                    const div = document.createElement('div');
                    div.className = 'message ' + (sender === user_id ? 'my-message' : 'their-message');
                    div.textContent = msg;

                    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if (timestamp) {
                        const timeDiv = document.createElement('div');
                        timeDiv.style.cssText = 'font-size: 0.8em; color: #666; margin-top: 5px; text-align: right;';
                        timeDiv.textContent = new Date(timestamp).toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
                        div.appendChild(timeDiv);
                    }

                    document.getElementById('messages').appendChild(div);
                    window.scrollTo(0, document.body.scrollHeight);
                }

                // –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                function markMessagesAsRead(otherUserId) {
                    fetch(`/api/mark_messages_read/${otherUserId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –Ω–∞–≤–±–∞—Ä–µ
                            updateNavbarBadges();
                        }
                    })
                    .catch(error => {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
                    });
                }

                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –Ω–∞–≤–±–∞—Ä–µ
                function updateNavbarBadges() {
                    fetch('/api/unread')
                        .then(response => response.json())
                        .then(data => {
                            let msgBadge = document.getElementById('msg-badge');
                            if (msgBadge) {
                                if (data.unread_messages > 0) {
                                    msgBadge.innerText = data.unread_messages;
                                    msgBadge.style.display = '';
                                } else {
                                    msgBadge.style.display = 'none';
                                }
                            }
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤:', error);
                        });
                }

                // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AJAX
                function checkNewMessages() {
                    fetch(`/chat_history/${other_user_id}`)
                        .then(response => response.json())
                        .then(messages => {
                            if (messages.length > lastMessageCount) {
                                // –ï—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                const newMessages = messages.slice(lastMessageCount);
                                let hasNewMessagesFromOther = false;

                                newMessages.forEach(msg => {
                                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–µ –æ—Ç —Å–µ–±—è
                                    if (msg.sender !== user_id) {
                                        addMessage(msg.text, msg.sender, msg.timestamp);
                                        hasNewMessagesFromOther = true;
                                    }
                                });

                                lastMessageCount = messages.length;
                                if (newMessages.length > 0) {
                                    lastMessageTimestamp = newMessages[newMessages.length - 1].timestamp;
                                }

                                // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
                                if (hasNewMessagesFromOther) {
                                    markMessagesAsRead(other_user_id);
                                }
                            }
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                        });
                }

                // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                function checkTypingStatus() {
                    fetch(`/api/typing-status/${other_user_id}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.is_typing && typingIndicator) {
                                typingIndicator.classList.add('show');
                            } else if (typingIndicator) {
                                typingIndicator.classList.remove('show');
                            }
                        })
                        .catch(error => console.error('Error checking typing status:', error));
                }

                // AJAX —á–∞—Ç - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AJAX
                document.getElementById('chat-form').onsubmit = function(e) {
                    e.preventDefault();
                    const input = document.getElementById('message-input');
                    const msg = input.value;
                    if (msg.trim()) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ AJAX
                        fetch('/send_message', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                receiver_id: other_user_id,
                                message: msg
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                addMessage(msg, user_id);
                                input.value = '';
                                lastMessageCount++;
                            }
                        })
                        .catch(error => {
                            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                        });
                    }
                };

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                setInterval(checkNewMessages, 3000);

                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                setInterval(checkTypingStatus, 2000);

                // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å—á–µ—Ç—á–∏–∫ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                document.getElementById('message-input').addEventListener('input', function() {
                    const maxLength = 400;
                    const currentLength = this.value.length;

                    // –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                    if (currentLength > maxLength) {
                        this.value = this.value.substring(0, maxLength);
                    }

                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (currentLength > 350) {
                        this.style.borderColor = '#ff6b6b';
                    } else {
                        this.style.borderColor = '';
                    }
                });

                // –õ–æ–≥–∏–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∏
                let typingTimeout;
                let typingNotificationTimeout;
                const typingIndicator = document.getElementById('typing-indicator');

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
                function sendTypingNotification(isTyping) {
                    fetch('/api/typing', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            receiver_id: other_user_id,
                            is_typing: isTyping
                        })
                    });
                }

                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
                document.getElementById('message-input').addEventListener('input', function() {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—á–∞—Ç–∏
                    sendTypingNotification(true);

                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    if (typingNotificationTimeout) {
                        clearTimeout(typingNotificationTimeout);
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                    typingNotificationTimeout = setTimeout(() => {
                        sendTypingNotification(false);
                    }, 3000);
                });

                // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                document.getElementById('chat-form').addEventListener('submit', function() {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ –ø–µ—á–∞—Ç–∏
                    sendTypingNotification(false);

                    if (typingNotificationTimeout) {
                        clearTimeout(typingNotificationTimeout);
                    }
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                document.getElementById('message-input').addEventListener('focus', function() {
                    checkNewMessages();
                });

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                window.addEventListener('scroll', function() {
                    if (window.scrollY + window.innerHeight >= document.body.scrollHeight - 100) {
                        checkNewMessages();
                    }
                });

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                window.addEventListener('load', function() {
                    window.scrollTo(0, document.body.scrollHeight);
                    // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–∞
                    markMessagesAsRead(other_user_id);
                });
            </script>
        </body>
        </html>
    ''', other_profile=other_profile, user_id=user_id, chat_key=chat_key, navbar=navbar, get_photo_url=get_photo_url,
                                  messages_db=messages_db, get_starry_night_css=get_starry_night_css)


@app.route('/chat_history/<string:other_user_id>')
@require_profile
def chat_history(other_user_id):
    user_id = request.cookies.get('user_id')
    chat_key = '_'.join(sorted([user_id, other_user_id]))
    msgs = Message.query.filter_by(chat_key=chat_key).order_by(Message.timestamp).all()
    return jsonify([
        {'sender': m.sender, 'text': m.text, 'timestamp': m.timestamp.isoformat()} for m in msgs
    ])


@app.route('/send_message', methods=['POST'])
@require_profile
def send_message():
    user_id = request.cookies.get('user_id')
    data = request.get_json()
    receiver_id = data.get('receiver_id')
    message_text = data.get('message')

    if not receiver_id or not message_text:
        return jsonify({'success': False, 'error': 'Missing data'})

    # –°–æ–∑–¥–∞–µ–º chat_key
    chat_key = '_'.join(sorted([user_id, receiver_id]))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
    new_message = Message(chat_key=chat_key, sender=user_id, text=message_text)
    db.session.add(new_message)
    db.session.commit()

    return jsonify({'success': True})


def check_for_matches(user_id):
    liked_ids = set(l.liked_id for l in Like.query.filter_by(user_id=user_id).all())
    liked_me_ids = set(l.user_id for l in Like.query.filter_by(liked_id=user_id).all())
    matches_ids = liked_ids & liked_me_ids
    for matched_user_id in matches_ids:
        if matched_user_id not in new_matches[user_id]:
            user_profile = Profile.query.get(user_id)
            matched_profile = Profile.query.get(matched_user_id)
            if user_profile and matched_profile:
                add_notification(user_id, f"‚ú® –£ –≤–∞—Å –º—ç—Ç—á —Å {matched_profile.name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è.")
                add_notification(matched_user_id, f"‚ú® –£ –≤–∞—Å –º—ç—Ç—á —Å {user_profile.name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è.")
                new_matches[user_id].add(matched_user_id)
                new_matches[matched_user_id].add(user_id)


# –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Ñ–æ—Ç–æ
PLACEHOLDER_PHOTO = '/static/uploads/placeholder.png'


def get_photo_url(profile):
    if hasattr(profile, 'photo') and profile.photo and os.path.exists(
            os.path.join(app.config['UPLOAD_FOLDER'], profile.photo)):
        return url_for('static', filename='uploads/' + profile.photo)
    return PLACEHOLDER_PHOTO


@app.route('/test-geolocation')
def test_geolocation():
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <title>–¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; text-align: center; }
                .success { color: green; font-weight: bold; }
                .error { color: red; font-weight: bold; }
                button { padding: 10px 20px; margin: 10px; font-size: 16px; }
            </style>
        </head>
        <body>
            <h1>üîó –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</h1>
            <p>–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</p>

            <button onclick="testGeolocation()">üìç –¢–µ—Å—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</button>
            <div id="result"></div>

            <script>
                function testGeolocation() {
                    const resultDiv = document.getElementById('result');
                    resultDiv.innerHTML = '<p>–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...</p>';

                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                            function(position) {
                                resultDiv.innerHTML = `
                                    <p class="success">‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>
                                    <p>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${position.coords.latitude}, ${position.coords.longitude}</p>
                                    <p>–¢–æ—á–Ω–æ—Å—Ç—å: ¬±${position.coords.accuracy} –º–µ—Ç—Ä–æ–≤</p>
                                `;
                            },
                            function(error) {
                                let errorMessage = '';
                                switch(error.code) {
                                    case error.PERMISSION_DENIED:
                                        errorMessage = '‚ùå –î–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—Ä–µ—â–µ–Ω';
                                        break;
                                    case error.POSITION_UNAVAILABLE:
                                        errorMessage = '‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                                        break;
                                    case error.TIMEOUT:
                                        errorMessage = '‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
                                        break;
                                    default:
                                        errorMessage = '‚ùå –û—à–∏–±–∫–∞: ' + error.message;
                                }
                                resultDiv.innerHTML = `<p class="error">${errorMessage}</p>`;
                            },
                            {
                                enableHighAccuracy: false,
                                timeout: 10000,
                                maximumAge: 60000
                            }
                        );
                    } else {
                        resultDiv.innerHTML = '<p class="error">‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è</p>';
                    }
                }
            </script>
        </body>
        </html>
    ''')


@app.route('/api/profiles', methods=['GET'])
def api_get_profiles_count():
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        count = Profile.query.count()
        return jsonify({
            'success': True,
            'count': count
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/api/cleanup-profiles', methods=['POST'])
def api_cleanup_profiles():
    """
    API endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç
    """
    try:
        deleted_count = cleanup_expired_profiles()
        return jsonify({
            'success': True,
            'deleted_count': deleted_count,
            'lifetime_hours': PROFILE_LIFETIME_HOURS
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
typing_status = {}


@app.route('/api/typing', methods=['POST'])
def api_typing():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    user_id = request.cookies.get('user_id')
    if not user_id or Profile.query.get(user_id) is None:
        return jsonify({'success': False, 'error': 'Profile required'}), 401
    """
    API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–µ—á–∞—Ç–∏
    """
    user_id = request.cookies.get('user_id')
    data = request.get_json()
    receiver_id = data.get('receiver_id')
    is_typing = data.get('is_typing')

    if not receiver_id:
        return jsonify({'success': False, 'error': 'Missing receiver_id'})

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏
    typing_key = f"{user_id}_{receiver_id}"

    if is_typing:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∏
        typing_status[typing_key] = {
            'timestamp': time.time(),
            'user_id': user_id,
            'receiver_id': receiver_id
        }
    else:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—á–∞—Ç–∏
        typing_status.pop(typing_key, None)

    return jsonify({'success': True})


@app.route('/api/typing-status/<string:other_user_id>')
def api_typing_status(other_user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
    user_id = request.cookies.get('user_id')
    if not user_id or Profile.query.get(user_id) is None:
        return jsonify({'success': False, 'error': 'Profile required'}), 401
    """
    API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    """
    user_id = request.cookies.get('user_id')

    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—á–∞—Ç–∏
    typing_key = f"{other_user_id}_{user_id}"

    if typing_key in typing_status:
        typing_info = typing_status[typing_key]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ —Å—Ç–∞—Ç—É—Å (–±–æ–ª—å—à–µ 5 —Å–µ–∫—É–Ω–¥)
        if time.time() - typing_info['timestamp'] < 5:
            return jsonify({'is_typing': True})

    return jsonify({'is_typing': False})


@app.route('/terms')
def terms():
    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
            <title>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    max-width: 800px; 
                    margin: 0 auto; 
                    padding: 20px; 
                    background: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 25%, #16213e 50%, #0f3460 75%, #533483 100%);
                    background-size: 400% 400%;
                    animation: starryNight 15s ease infinite;
                    position: relative;
                    min-height: 100vh;
                }

                @keyframes starryNight {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }

                .terms-container {
                    position: relative;
                    z-index: 2;
                    background: rgba(255, 255, 255, 0.1);
                    backdrop-filter: blur(10px);
                    border-radius: 20px;
                    padding: 40px;
                    border: 1px solid rgba(255, 255, 255, 0.2);
                    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
                    color: #fff;
                }

                h1 {
                    color: #fff;
                    text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
                    margin-bottom: 30px;
                    font-size: 2.2em;
                    text-align: center;
                }

                h2 {
                    color: #4CAF50;
                    margin: 30px 0 15px 0;
                    font-size: 1.5em;
                    border-bottom: 2px solid rgba(76, 175, 80, 0.3);
                    padding-bottom: 10px;
                }

                p {
                    line-height: 1.6;
                    margin-bottom: 15px;
                    font-size: 1.1em;
                }

                .highlight {
                    background: rgba(76, 175, 80, 0.1);
                    border-left: 4px solid #4CAF50;
                    padding: 15px;
                    margin: 20px 0;
                    border-radius: 5px;
                }

                .back-btn {
                    background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 15px 30px;
                    border-radius: 25px;
                    box-shadow: 0 4px 20px rgba(102, 126, 234, 0.4);
                    font-size: 1.1em;
                    cursor: pointer;
                    transition: all 0.3s ease;
                    font-weight: bold;
                    text-decoration: none;
                    display: inline-block;
                    margin-top: 30px;
                }

                .back-btn:hover {
                    box-shadow: 0 8px 30px rgba(102, 126, 234, 0.6);
                    transform: translateY(-3px) scale(1.05);
                }

                .section {
                    background: rgba(255, 255, 255, 0.05);
                    border-radius: 10px;
                    padding: 20px;
                    margin: 20px 0;
                    border: 1px solid rgba(255, 255, 255, 0.1);
                }

                ul {
                    margin: 15px 0;
                    padding-left: 20px;
                }

                li {
                    margin: 8px 0;
                    line-height: 1.5;
                }

                .important {
                    background: rgba(244, 67, 54, 0.1);
                    border: 1px solid rgba(244, 67, 54, 0.3);
                    padding: 15px;
                    border-radius: 10px;
                    margin: 20px 0;
                }

                .important h3 {
                    color: #F44336;
                    margin-bottom: 10px;
                }
            </style>
        </head>
        <body>
            <div class="terms-container">
                <h1>üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</h1>

                <div class="highlight">
                    <p><strong>–ó–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ–∑–Ω–∞–∫–æ–º—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞</strong></p>
                </div>

                <div class="section">
                    <h2>üéØ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</h2>
                    <p>–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç –∏ –ø–æ–∏—Å–∫–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –º–∏—Ä–µ. –ú—ã –ø–æ–æ—â—Ä—è–µ–º –ª–∏—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –æ–±—â–µ–Ω–∏–µ –≤ –∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.</p>
                </div>

                <div class="section">
                    <h2>üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
                    <ul>
                        <li>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–≤–µ–¥–µ–Ω–∏–π</li>
                        <li>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∑–∞–≤–µ–¥–µ–Ω–∏–π –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏</li>
                        <li>–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</li>
                        <li>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤ –∞–Ω–∫–µ—Ç–µ</li>
                    </ul>
                </div>

                <div class="section">
                    <h2>üö´ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é</h2>
                    <ul>
                        <li>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 3 –∫–º –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è</li>
                        <li>–≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å "–¥–∏–≤–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</li>
                        <li>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</li>
                    </ul>
                </div>

                <div class="section">
                    <h2>üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç</h2>
                    <ul>
                        <li>–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</li>
                        <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á—É–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç</li>
                        <li>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–ª–∏—á–Ω—ã–º–∏ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                        <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ —É–¥–∞–ª–∏—Ç—å –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç</li>
                    </ul>
                </div>

                <div class="section">
                    <h2>ü§ù –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è</h2>
                    <ul>
                        <li>–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</li>
                        <li>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–∞–º–∞ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã</li>
                        <li>–ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ñ–∞–ª—å—à–∏–≤—ã–µ –∞–Ω–∫–µ—Ç—ã</li>
                        <li>–°–æ–±–ª—é–¥–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã –∏ –Ω–æ—Ä–º—ã –º–æ—Ä–∞–ª–∏</li>
                    </ul>
                </div>

                <div class="important">
                    <h3>‚ö†Ô∏è –í–∞–∂–Ω–æ</h3>
                    <p>–°–æ–∑–¥–∞–≤–∞—è –∞–Ω–∫–µ—Ç—É, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –∏—Ö —Å–æ–±–ª—é–¥–∞—Ç—å. –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞.</p>
                </div>

                <div style="text-align: center;">
                    <a href="/create" class="back-btn">üìù –°–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É</a>
                    <a href="/" class="back-btn">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </div>
            </div>
        </body>
        </html>
    ''')


def cleanup_expired_profiles():
    """
    –£–¥–∞–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ PROFILE_LIFETIME_HOURS —á–∞—Å–æ–≤
    """
    try:
        from datetime import timedelta
        cutoff_time = datetime.utcnow() - timedelta(hours=PROFILE_LIFETIME_HOURS)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
        expired_profiles = Profile.query.filter(Profile.created_at < cutoff_time).all()

        deleted_count = 0
        for profile in expired_profiles:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            Like.query.filter_by(user_id=profile.id).delete()
            Like.query.filter_by(liked_id=profile.id).delete()

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            Message.query.filter(
                (Message.chat_key.contains(profile.id))
            ).delete()

            # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ —Ñ–∞–π–ª
            if profile.photo:
                try:
                    photo_path = os.path.join(app.config['UPLOAD_FOLDER'], profile.photo)
                    if os.path.exists(photo_path):
                        os.remove(photo_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª —Ñ–æ—Ç–æ: {profile.photo}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {profile.photo}: {e}")

            # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
            db.session.delete(profile)
            deleted_count += 1

        if deleted_count > 0:
            db.session.commit()
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç")
        else:
            print("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return deleted_count

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç: {e}")
        db.session.rollback()
        return 0


if __name__ == '__main__':
    with app.app_context():
        db.create_all()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
        print("üßπ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç...")
        deleted_count = cleanup_expired_profiles()
        print(f"‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∞–Ω–∫–µ—Ç—ã: {PROFILE_LIFETIME_HOURS} —á–∞—Å–æ–≤")

    app.run(host='0.0.0.0', port=5000, debug=True)